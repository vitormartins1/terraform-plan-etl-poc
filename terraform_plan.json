{
  "format_version": "1.2",
  "terraform_version": "1.10.3",
  "planned_values": {
    "root_module": {
      "resources": [
        {
          "address": "aws_iam_policy.lambda_s3_policy",
          "mode": "managed",
          "type": "aws_iam_policy",
          "name": "lambda_s3_policy",
          "provider_name": "registry.terraform.io/hashicorp/aws",
          "schema_version": 0,
          "values": {
            "description": null,
            "name": "lambda-s3-policy",
            "path": "/",
            "tags": null
          },
          "sensitive_values": { "tags_all": {} }
        },
        {
          "address": "aws_iam_policy_attachment.lambda_s3_policy_attachment",
          "mode": "managed",
          "type": "aws_iam_policy_attachment",
          "name": "lambda_s3_policy_attachment",
          "provider_name": "registry.terraform.io/hashicorp/aws",
          "schema_version": 0,
          "values": {
            "groups": null,
            "name": "lambda-s3-policy-attachment",
            "roles": ["example-lambda"],
            "users": null
          },
          "sensitive_values": { "roles": [false] }
        },
        {
          "address": "aws_sns_topic.example_topic",
          "mode": "managed",
          "type": "aws_sns_topic",
          "name": "example_topic",
          "provider_name": "registry.terraform.io/hashicorp/aws",
          "schema_version": 0,
          "values": {
            "application_failure_feedback_role_arn": null,
            "application_success_feedback_role_arn": null,
            "application_success_feedback_sample_rate": null,
            "archive_policy": null,
            "content_based_deduplication": false,
            "delivery_policy": null,
            "display_name": null,
            "fifo_topic": false,
            "firehose_failure_feedback_role_arn": null,
            "firehose_success_feedback_role_arn": null,
            "firehose_success_feedback_sample_rate": null,
            "http_failure_feedback_role_arn": null,
            "http_success_feedback_role_arn": null,
            "http_success_feedback_sample_rate": null,
            "kms_master_key_id": null,
            "lambda_failure_feedback_role_arn": null,
            "lambda_success_feedback_role_arn": null,
            "lambda_success_feedback_sample_rate": null,
            "name": "example-topic",
            "sqs_failure_feedback_role_arn": null,
            "sqs_success_feedback_role_arn": null,
            "sqs_success_feedback_sample_rate": null,
            "tags": null
          },
          "sensitive_values": { "tags_all": {} }
        },
        {
          "address": "aws_sns_topic_subscription.example_subscription",
          "mode": "managed",
          "type": "aws_sns_topic_subscription",
          "name": "example_subscription",
          "provider_name": "registry.terraform.io/hashicorp/aws",
          "schema_version": 0,
          "values": {
            "confirmation_timeout_in_minutes": 1,
            "delivery_policy": null,
            "endpoint_auto_confirms": false,
            "filter_policy": null,
            "protocol": "sqs",
            "raw_message_delivery": false,
            "redrive_policy": null,
            "replay_policy": null,
            "subscription_role_arn": null
          },
          "sensitive_values": {}
        },
        {
          "address": "aws_sqs_queue.example_queue",
          "mode": "managed",
          "type": "aws_sqs_queue",
          "name": "example_queue",
          "provider_name": "registry.terraform.io/hashicorp/aws",
          "schema_version": 0,
          "values": {
            "content_based_deduplication": false,
            "delay_seconds": 0,
            "fifo_queue": false,
            "kms_master_key_id": null,
            "max_message_size": 262144,
            "message_retention_seconds": 345600,
            "name": "example-queue",
            "receive_wait_time_seconds": 0,
            "tags": null,
            "visibility_timeout_seconds": 30
          },
          "sensitive_values": { "tags_all": {} }
        },
        {
          "address": "aws_sqs_queue_policy.example_policy",
          "mode": "managed",
          "type": "aws_sqs_queue_policy",
          "name": "example_policy",
          "provider_name": "registry.terraform.io/hashicorp/aws",
          "schema_version": 1,
          "sensitive_values": {}
        }
      ],
      "child_modules": [
        {
          "resources": [
            {
              "address": "module.lambda_function.aws_cloudwatch_log_group.lambda[0]",
              "mode": "managed",
              "type": "aws_cloudwatch_log_group",
              "name": "lambda",
              "index": 0,
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "values": {
                "kms_key_id": null,
                "name": "/aws/lambda/example-lambda",
                "retention_in_days": 0,
                "skip_destroy": false,
                "tags": null
              },
              "sensitive_values": { "tags_all": {} }
            },
            {
              "address": "module.lambda_function.aws_iam_policy.logs[0]",
              "mode": "managed",
              "type": "aws_iam_policy",
              "name": "logs",
              "index": 0,
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "values": {
                "description": null,
                "name": "example-lambda-logs",
                "path": "/",
                "tags": null
              },
              "sensitive_values": { "tags_all": {} }
            },
            {
              "address": "module.lambda_function.aws_iam_role.lambda[0]",
              "mode": "managed",
              "type": "aws_iam_role",
              "name": "lambda",
              "index": 0,
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "values": {
                "description": null,
                "force_detach_policies": true,
                "max_session_duration": 3600,
                "name": "example-lambda",
                "path": "/",
                "permissions_boundary": null,
                "tags": null
              },
              "sensitive_values": {
                "inline_policy": [],
                "managed_policy_arns": [],
                "tags_all": {}
              }
            },
            {
              "address": "module.lambda_function.aws_iam_role_policy_attachment.logs[0]",
              "mode": "managed",
              "type": "aws_iam_role_policy_attachment",
              "name": "logs",
              "index": 0,
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "values": { "role": "example-lambda" },
              "sensitive_values": {}
            },
            {
              "address": "module.lambda_function.aws_lambda_function.this[0]",
              "mode": "managed",
              "type": "aws_lambda_function",
              "name": "this",
              "index": 0,
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "values": {
                "code_signing_config_arn": null,
                "dead_letter_config": [],
                "description": "",
                "environment": [],
                "ephemeral_storage": [{ "size": 512 }],
                "file_system_config": [],
                "function_name": "example-lambda",
                "handler": "index.handler",
                "image_config": [],
                "image_uri": null,
                "kms_key_arn": null,
                "layers": null,
                "memory_size": 128,
                "package_type": "Zip",
                "publish": false,
                "replace_security_groups_on_destroy": null,
                "replacement_security_group_ids": null,
                "reserved_concurrent_executions": -1,
                "runtime": "nodejs16.x",
                "s3_bucket": null,
                "s3_key": null,
                "s3_object_version": null,
                "skip_destroy": false,
                "snap_start": [],
                "tags": null,
                "timeout": 3,
                "timeouts": null,
                "vpc_config": []
              },
              "sensitive_values": {
                "architectures": [],
                "dead_letter_config": [],
                "environment": [],
                "ephemeral_storage": [{}],
                "file_system_config": [],
                "image_config": [],
                "logging_config": [],
                "snap_start": [],
                "tags_all": {},
                "tracing_config": [],
                "vpc_config": []
              }
            },
            {
              "address": "module.lambda_function.data.aws_caller_identity.current",
              "mode": "data",
              "type": "aws_caller_identity",
              "name": "current",
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "sensitive_values": {}
            },
            {
              "address": "module.lambda_function.data.aws_iam_policy_document.assume_role[0]",
              "mode": "data",
              "type": "aws_iam_policy_document",
              "name": "assume_role",
              "index": 0,
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "values": {
                "override_json": null,
                "override_policy_documents": null,
                "policy_id": null,
                "source_json": null,
                "source_policy_documents": null,
                "statement": [
                  {
                    "actions": ["sts:AssumeRole"],
                    "condition": [],
                    "effect": "Allow",
                    "not_actions": null,
                    "not_principals": [],
                    "not_resources": null,
                    "principals": [
                      {
                        "identifiers": ["lambda.amazonaws.com"],
                        "type": "Service"
                      }
                    ],
                    "resources": null,
                    "sid": null
                  }
                ],
                "version": null
              },
              "sensitive_values": {
                "statement": [
                  {
                    "actions": [false],
                    "condition": [],
                    "not_principals": [],
                    "principals": [{ "identifiers": [false] }]
                  }
                ]
              }
            },
            {
              "address": "module.lambda_function.data.aws_iam_policy_document.logs[0]",
              "mode": "data",
              "type": "aws_iam_policy_document",
              "name": "logs",
              "index": 0,
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "values": {
                "override_json": null,
                "override_policy_documents": null,
                "policy_id": null,
                "source_json": null,
                "source_policy_documents": null,
                "statement": [
                  {
                    "actions": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents"
                    ],
                    "condition": [],
                    "effect": "Allow",
                    "not_actions": null,
                    "not_principals": [],
                    "not_resources": null,
                    "principals": [],
                    "sid": null
                  }
                ],
                "version": null
              },
              "sensitive_values": {
                "statement": [
                  {
                    "actions": [false, false, false],
                    "condition": [],
                    "not_principals": [],
                    "principals": [],
                    "resources": []
                  }
                ]
              }
            },
            {
              "address": "module.lambda_function.data.aws_partition.current",
              "mode": "data",
              "type": "aws_partition",
              "name": "current",
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "sensitive_values": {}
            },
            {
              "address": "module.lambda_function.data.aws_region.current",
              "mode": "data",
              "type": "aws_region",
              "name": "current",
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "sensitive_values": {}
            },
            {
              "address": "module.lambda_function.data.external.archive_prepare[0]",
              "mode": "data",
              "type": "external",
              "name": "archive_prepare",
              "index": 0,
              "provider_name": "registry.terraform.io/hashicorp/external",
              "schema_version": 0,
              "values": {
                "program": [
                  "python.exe",
                  ".terraform/modules/lambda_function/package.py",
                  "prepare"
                ],
                "query": {
                  "artifacts_dir": "builds",
                  "docker": null,
                  "hash_extra": "",
                  "hash_extra_paths": "[]",
                  "paths": "{\"cwd\":\"C:/projects/terraform-plan-etl-poc\",\"module\":\".terraform/modules/lambda_function\",\"root\":\".\"}",
                  "recreate_missing_package": "true",
                  "runtime": "nodejs16.x",
                  "source_path": "\"./lambda\""
                },
                "working_dir": null
              },
              "sensitive_values": {
                "program": [false, false, false],
                "query": {},
                "result": {}
              }
            },
            {
              "address": "module.lambda_function.local_file.archive_plan[0]",
              "mode": "managed",
              "type": "local_file",
              "name": "archive_plan",
              "index": 0,
              "provider_name": "registry.terraform.io/hashicorp/local",
              "schema_version": 0,
              "values": {
                "content_base64": null,
                "directory_permission": "0755",
                "file_permission": "0644",
                "sensitive_content": null,
                "source": null
              },
              "sensitive_values": { "sensitive_content": true }
            },
            {
              "address": "module.lambda_function.null_resource.archive[0]",
              "mode": "managed",
              "type": "null_resource",
              "name": "archive",
              "index": 0,
              "provider_name": "registry.terraform.io/hashicorp/null",
              "schema_version": 0,
              "values": { "triggers": {} },
              "sensitive_values": { "triggers": {} }
            },
            {
              "address": "module.lambda_function.null_resource.sam_metadata_aws_lambda_function[0]",
              "mode": "managed",
              "type": "null_resource",
              "name": "sam_metadata_aws_lambda_function",
              "index": 0,
              "provider_name": "registry.terraform.io/hashicorp/null",
              "schema_version": 0,
              "values": {
                "triggers": {
                  "original_source_code": "\"./lambda\"",
                  "resource_name": "aws_lambda_function.this[0]",
                  "resource_type": "ZIP_LAMBDA_FUNCTION",
                  "source_code_property": "path"
                }
              },
              "sensitive_values": { "triggers": {} }
            }
          ],
          "address": "module.lambda_function"
        },
        {
          "resources": [
            {
              "address": "module.s3_bucket.aws_s3_bucket.this[0]",
              "mode": "managed",
              "type": "aws_s3_bucket",
              "name": "this",
              "index": 0,
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "values": {
                "bucket": "example-bucket",
                "force_destroy": false,
                "object_lock_enabled": false,
                "tags": { "Environment": "Development", "Owner": "User" },
                "tags_all": { "Environment": "Development", "Owner": "User" },
                "timeouts": null
              },
              "sensitive_values": {
                "cors_rule": [],
                "grant": [],
                "lifecycle_rule": [],
                "logging": [],
                "object_lock_configuration": [],
                "replication_configuration": [],
                "server_side_encryption_configuration": [],
                "tags": {},
                "tags_all": {},
                "versioning": [],
                "website": []
              }
            },
            {
              "address": "module.s3_bucket.aws_s3_bucket_acl.this[0]",
              "mode": "managed",
              "type": "aws_s3_bucket_acl",
              "name": "this",
              "index": 0,
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "values": { "acl": "private", "expected_bucket_owner": null },
              "sensitive_values": { "access_control_policy": [] }
            },
            {
              "address": "module.s3_bucket.aws_s3_bucket_public_access_block.this[0]",
              "mode": "managed",
              "type": "aws_s3_bucket_public_access_block",
              "name": "this",
              "index": 0,
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "values": {
                "block_public_acls": true,
                "block_public_policy": true,
                "ignore_public_acls": true,
                "restrict_public_buckets": true
              },
              "sensitive_values": {}
            },
            {
              "address": "module.s3_bucket.aws_s3_bucket_server_side_encryption_configuration.this[0]",
              "mode": "managed",
              "type": "aws_s3_bucket_server_side_encryption_configuration",
              "name": "this",
              "index": 0,
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "values": {
                "expected_bucket_owner": null,
                "rule": [
                  {
                    "apply_server_side_encryption_by_default": [
                      { "kms_master_key_id": "", "sse_algorithm": "AES256" }
                    ],
                    "bucket_key_enabled": null
                  }
                ]
              },
              "sensitive_values": {
                "rule": [{ "apply_server_side_encryption_by_default": [{}] }]
              }
            },
            {
              "address": "module.s3_bucket.aws_s3_bucket_versioning.this[0]",
              "mode": "managed",
              "type": "aws_s3_bucket_versioning",
              "name": "this",
              "index": 0,
              "provider_name": "registry.terraform.io/hashicorp/aws",
              "schema_version": 0,
              "values": {
                "expected_bucket_owner": null,
                "mfa": null,
                "versioning_configuration": [{ "status": "Enabled" }]
              },
              "sensitive_values": { "versioning_configuration": [{}] }
            }
          ],
          "address": "module.s3_bucket"
        }
      ]
    }
  },
  "resource_changes": [
    {
      "address": "aws_iam_policy.lambda_s3_policy",
      "mode": "managed",
      "type": "aws_iam_policy",
      "name": "lambda_s3_policy",
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": ["create"],
        "before": null,
        "after": {
          "description": null,
          "name": "lambda-s3-policy",
          "path": "/",
          "tags": null
        },
        "after_unknown": {
          "arn": true,
          "attachment_count": true,
          "id": true,
          "name_prefix": true,
          "policy": true,
          "policy_id": true,
          "tags_all": true
        },
        "before_sensitive": false,
        "after_sensitive": { "tags_all": {} }
      }
    },
    {
      "address": "aws_iam_policy_attachment.lambda_s3_policy_attachment",
      "mode": "managed",
      "type": "aws_iam_policy_attachment",
      "name": "lambda_s3_policy_attachment",
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": ["create"],
        "before": null,
        "after": {
          "groups": null,
          "name": "lambda-s3-policy-attachment",
          "roles": ["example-lambda"],
          "users": null
        },
        "after_unknown": { "id": true, "policy_arn": true, "roles": [false] },
        "before_sensitive": false,
        "after_sensitive": { "roles": [false] }
      }
    },
    {
      "address": "aws_sns_topic.example_topic",
      "mode": "managed",
      "type": "aws_sns_topic",
      "name": "example_topic",
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": ["create"],
        "before": null,
        "after": {
          "application_failure_feedback_role_arn": null,
          "application_success_feedback_role_arn": null,
          "application_success_feedback_sample_rate": null,
          "archive_policy": null,
          "content_based_deduplication": false,
          "delivery_policy": null,
          "display_name": null,
          "fifo_topic": false,
          "firehose_failure_feedback_role_arn": null,
          "firehose_success_feedback_role_arn": null,
          "firehose_success_feedback_sample_rate": null,
          "http_failure_feedback_role_arn": null,
          "http_success_feedback_role_arn": null,
          "http_success_feedback_sample_rate": null,
          "kms_master_key_id": null,
          "lambda_failure_feedback_role_arn": null,
          "lambda_success_feedback_role_arn": null,
          "lambda_success_feedback_sample_rate": null,
          "name": "example-topic",
          "sqs_failure_feedback_role_arn": null,
          "sqs_success_feedback_role_arn": null,
          "sqs_success_feedback_sample_rate": null,
          "tags": null
        },
        "after_unknown": {
          "arn": true,
          "beginning_archive_time": true,
          "id": true,
          "name_prefix": true,
          "owner": true,
          "policy": true,
          "signature_version": true,
          "tags_all": true,
          "tracing_config": true
        },
        "before_sensitive": false,
        "after_sensitive": { "tags_all": {} }
      }
    },
    {
      "address": "aws_sns_topic_subscription.example_subscription",
      "mode": "managed",
      "type": "aws_sns_topic_subscription",
      "name": "example_subscription",
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": ["create"],
        "before": null,
        "after": {
          "confirmation_timeout_in_minutes": 1,
          "delivery_policy": null,
          "endpoint_auto_confirms": false,
          "filter_policy": null,
          "protocol": "sqs",
          "raw_message_delivery": false,
          "redrive_policy": null,
          "replay_policy": null,
          "subscription_role_arn": null
        },
        "after_unknown": {
          "arn": true,
          "confirmation_was_authenticated": true,
          "endpoint": true,
          "filter_policy_scope": true,
          "id": true,
          "owner_id": true,
          "pending_confirmation": true,
          "topic_arn": true
        },
        "before_sensitive": false,
        "after_sensitive": {}
      }
    },
    {
      "address": "aws_sqs_queue.example_queue",
      "mode": "managed",
      "type": "aws_sqs_queue",
      "name": "example_queue",
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": ["create"],
        "before": null,
        "after": {
          "content_based_deduplication": false,
          "delay_seconds": 0,
          "fifo_queue": false,
          "kms_master_key_id": null,
          "max_message_size": 262144,
          "message_retention_seconds": 345600,
          "name": "example-queue",
          "receive_wait_time_seconds": 0,
          "tags": null,
          "visibility_timeout_seconds": 30
        },
        "after_unknown": {
          "arn": true,
          "deduplication_scope": true,
          "fifo_throughput_limit": true,
          "id": true,
          "kms_data_key_reuse_period_seconds": true,
          "name_prefix": true,
          "policy": true,
          "redrive_allow_policy": true,
          "redrive_policy": true,
          "sqs_managed_sse_enabled": true,
          "tags_all": true,
          "url": true
        },
        "before_sensitive": false,
        "after_sensitive": { "tags_all": {} }
      }
    },
    {
      "address": "aws_sqs_queue_policy.example_policy",
      "mode": "managed",
      "type": "aws_sqs_queue_policy",
      "name": "example_policy",
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": ["create"],
        "before": null,
        "after": {},
        "after_unknown": { "id": true, "policy": true, "queue_url": true },
        "before_sensitive": false,
        "after_sensitive": {}
      }
    },
    {
      "address": "module.lambda_function.data.aws_caller_identity.current",
      "module_address": "module.lambda_function",
      "mode": "data",
      "type": "aws_caller_identity",
      "name": "current",
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": ["read"],
        "before": null,
        "after": {},
        "after_unknown": {
          "account_id": true,
          "arn": true,
          "id": true,
          "user_id": true
        },
        "before_sensitive": false,
        "after_sensitive": {}
      },
      "action_reason": "read_because_dependency_pending"
    },
    {
      "address": "module.lambda_function.data.aws_iam_policy_document.assume_role[0]",
      "module_address": "module.lambda_function",
      "mode": "data",
      "type": "aws_iam_policy_document",
      "name": "assume_role",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": ["read"],
        "before": null,
        "after": {
          "override_json": null,
          "override_policy_documents": null,
          "policy_id": null,
          "source_json": null,
          "source_policy_documents": null,
          "statement": [
            {
              "actions": ["sts:AssumeRole"],
              "condition": [],
              "effect": "Allow",
              "not_actions": null,
              "not_principals": [],
              "not_resources": null,
              "principals": [
                { "identifiers": ["lambda.amazonaws.com"], "type": "Service" }
              ],
              "resources": null,
              "sid": null
            }
          ],
          "version": null
        },
        "after_unknown": {
          "id": true,
          "json": true,
          "minified_json": true,
          "statement": [
            {
              "actions": [false],
              "condition": [],
              "not_principals": [],
              "principals": [{ "identifiers": [false] }]
            }
          ]
        },
        "before_sensitive": false,
        "after_sensitive": {
          "statement": [
            {
              "actions": [false],
              "condition": [],
              "not_principals": [],
              "principals": [{ "identifiers": [false] }]
            }
          ]
        }
      },
      "action_reason": "read_because_dependency_pending"
    },
    {
      "address": "module.lambda_function.data.aws_iam_policy_document.logs[0]",
      "module_address": "module.lambda_function",
      "mode": "data",
      "type": "aws_iam_policy_document",
      "name": "logs",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": ["read"],
        "before": null,
        "after": {
          "override_json": null,
          "override_policy_documents": null,
          "policy_id": null,
          "source_json": null,
          "source_policy_documents": null,
          "statement": [
            {
              "actions": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "condition": [],
              "effect": "Allow",
              "not_actions": null,
              "not_principals": [],
              "not_resources": null,
              "principals": [],
              "sid": null
            }
          ],
          "version": null
        },
        "after_unknown": {
          "id": true,
          "json": true,
          "minified_json": true,
          "statement": [
            {
              "actions": [false, false, false],
              "condition": [],
              "not_principals": [],
              "principals": [],
              "resources": true
            }
          ]
        },
        "before_sensitive": false,
        "after_sensitive": {
          "statement": [
            {
              "actions": [false, false, false],
              "condition": [],
              "not_principals": [],
              "principals": [],
              "resources": []
            }
          ]
        }
      },
      "action_reason": "read_because_config_unknown"
    },
    {
      "address": "module.lambda_function.data.aws_partition.current",
      "module_address": "module.lambda_function",
      "mode": "data",
      "type": "aws_partition",
      "name": "current",
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": ["read"],
        "before": null,
        "after": {},
        "after_unknown": {
          "dns_suffix": true,
          "id": true,
          "partition": true,
          "reverse_dns_prefix": true
        },
        "before_sensitive": false,
        "after_sensitive": {}
      },
      "action_reason": "read_because_dependency_pending"
    },
    {
      "address": "module.lambda_function.data.aws_region.current",
      "module_address": "module.lambda_function",
      "mode": "data",
      "type": "aws_region",
      "name": "current",
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": ["read"],
        "before": null,
        "after": {},
        "after_unknown": {
          "description": true,
          "endpoint": true,
          "id": true,
          "name": true
        },
        "before_sensitive": false,
        "after_sensitive": {}
      },
      "action_reason": "read_because_dependency_pending"
    },
    {
      "address": "module.lambda_function.data.external.archive_prepare[0]",
      "module_address": "module.lambda_function",
      "mode": "data",
      "type": "external",
      "name": "archive_prepare",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/external",
      "change": {
        "actions": ["read"],
        "before": null,
        "after": {
          "program": [
            "python.exe",
            ".terraform/modules/lambda_function/package.py",
            "prepare"
          ],
          "query": {
            "artifacts_dir": "builds",
            "docker": null,
            "hash_extra": "",
            "hash_extra_paths": "[]",
            "paths": "{\"cwd\":\"C:/projects/terraform-plan-etl-poc\",\"module\":\".terraform/modules/lambda_function\",\"root\":\".\"}",
            "recreate_missing_package": "true",
            "runtime": "nodejs16.x",
            "source_path": "\"./lambda\""
          },
          "working_dir": null
        },
        "after_unknown": {
          "id": true,
          "program": [false, false, false],
          "query": {},
          "result": true
        },
        "before_sensitive": false,
        "after_sensitive": {
          "program": [false, false, false],
          "query": {},
          "result": {}
        }
      },
      "action_reason": "read_because_dependency_pending"
    },
    {
      "address": "module.lambda_function.aws_cloudwatch_log_group.lambda[0]",
      "module_address": "module.lambda_function",
      "mode": "managed",
      "type": "aws_cloudwatch_log_group",
      "name": "lambda",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": ["create"],
        "before": null,
        "after": {
          "kms_key_id": null,
          "name": "/aws/lambda/example-lambda",
          "retention_in_days": 0,
          "skip_destroy": false,
          "tags": null
        },
        "after_unknown": {
          "arn": true,
          "id": true,
          "log_group_class": true,
          "name_prefix": true,
          "tags_all": true
        },
        "before_sensitive": false,
        "after_sensitive": { "tags_all": {} }
      }
    },
    {
      "address": "module.lambda_function.aws_iam_policy.logs[0]",
      "module_address": "module.lambda_function",
      "mode": "managed",
      "type": "aws_iam_policy",
      "name": "logs",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": ["create"],
        "before": null,
        "after": {
          "description": null,
          "name": "example-lambda-logs",
          "path": "/",
          "tags": null
        },
        "after_unknown": {
          "arn": true,
          "attachment_count": true,
          "id": true,
          "name_prefix": true,
          "policy": true,
          "policy_id": true,
          "tags_all": true
        },
        "before_sensitive": false,
        "after_sensitive": { "tags_all": {} }
      }
    },
    {
      "address": "module.lambda_function.aws_iam_role.lambda[0]",
      "module_address": "module.lambda_function",
      "mode": "managed",
      "type": "aws_iam_role",
      "name": "lambda",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": ["create"],
        "before": null,
        "after": {
          "description": null,
          "force_detach_policies": true,
          "max_session_duration": 3600,
          "name": "example-lambda",
          "path": "/",
          "permissions_boundary": null,
          "tags": null
        },
        "after_unknown": {
          "arn": true,
          "assume_role_policy": true,
          "create_date": true,
          "id": true,
          "inline_policy": true,
          "managed_policy_arns": true,
          "name_prefix": true,
          "tags_all": true,
          "unique_id": true
        },
        "before_sensitive": false,
        "after_sensitive": {
          "inline_policy": [],
          "managed_policy_arns": [],
          "tags_all": {}
        }
      }
    },
    {
      "address": "module.lambda_function.aws_iam_role_policy_attachment.logs[0]",
      "module_address": "module.lambda_function",
      "mode": "managed",
      "type": "aws_iam_role_policy_attachment",
      "name": "logs",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": ["create"],
        "before": null,
        "after": { "role": "example-lambda" },
        "after_unknown": { "id": true, "policy_arn": true },
        "before_sensitive": false,
        "after_sensitive": {}
      }
    },
    {
      "address": "module.lambda_function.aws_lambda_function.this[0]",
      "module_address": "module.lambda_function",
      "mode": "managed",
      "type": "aws_lambda_function",
      "name": "this",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": ["create"],
        "before": null,
        "after": {
          "code_signing_config_arn": null,
          "dead_letter_config": [],
          "description": "",
          "environment": [],
          "ephemeral_storage": [{ "size": 512 }],
          "file_system_config": [],
          "function_name": "example-lambda",
          "handler": "index.handler",
          "image_config": [],
          "image_uri": null,
          "kms_key_arn": null,
          "layers": null,
          "memory_size": 128,
          "package_type": "Zip",
          "publish": false,
          "replace_security_groups_on_destroy": null,
          "replacement_security_group_ids": null,
          "reserved_concurrent_executions": -1,
          "runtime": "nodejs16.x",
          "s3_bucket": null,
          "s3_key": null,
          "s3_object_version": null,
          "skip_destroy": false,
          "snap_start": [],
          "tags": null,
          "timeout": 3,
          "timeouts": null,
          "vpc_config": []
        },
        "after_unknown": {
          "architectures": true,
          "arn": true,
          "code_sha256": true,
          "dead_letter_config": [],
          "environment": [],
          "ephemeral_storage": [{}],
          "file_system_config": [],
          "filename": true,
          "id": true,
          "image_config": [],
          "invoke_arn": true,
          "last_modified": true,
          "logging_config": true,
          "qualified_arn": true,
          "qualified_invoke_arn": true,
          "role": true,
          "signing_job_arn": true,
          "signing_profile_version_arn": true,
          "snap_start": [],
          "source_code_hash": true,
          "source_code_size": true,
          "tags_all": true,
          "tracing_config": true,
          "version": true,
          "vpc_config": []
        },
        "before_sensitive": false,
        "after_sensitive": {
          "architectures": [],
          "dead_letter_config": [],
          "environment": [],
          "ephemeral_storage": [{}],
          "file_system_config": [],
          "image_config": [],
          "logging_config": [],
          "snap_start": [],
          "tags_all": {},
          "tracing_config": [],
          "vpc_config": []
        }
      }
    },
    {
      "address": "module.lambda_function.local_file.archive_plan[0]",
      "module_address": "module.lambda_function",
      "mode": "managed",
      "type": "local_file",
      "name": "archive_plan",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/local",
      "change": {
        "actions": ["create"],
        "before": null,
        "after": {
          "content_base64": null,
          "directory_permission": "0755",
          "file_permission": "0644",
          "sensitive_content": null,
          "source": null
        },
        "after_unknown": {
          "content": true,
          "content_base64sha256": true,
          "content_base64sha512": true,
          "content_md5": true,
          "content_sha1": true,
          "content_sha256": true,
          "content_sha512": true,
          "filename": true,
          "id": true
        },
        "before_sensitive": false,
        "after_sensitive": { "sensitive_content": true }
      }
    },
    {
      "address": "module.lambda_function.null_resource.archive[0]",
      "module_address": "module.lambda_function",
      "mode": "managed",
      "type": "null_resource",
      "name": "archive",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/null",
      "change": {
        "actions": ["create"],
        "before": null,
        "after": { "triggers": {} },
        "after_unknown": {
          "id": true,
          "triggers": { "filename": true, "timestamp": true }
        },
        "before_sensitive": false,
        "after_sensitive": { "triggers": {} }
      }
    },
    {
      "address": "module.lambda_function.null_resource.sam_metadata_aws_lambda_function[0]",
      "module_address": "module.lambda_function",
      "mode": "managed",
      "type": "null_resource",
      "name": "sam_metadata_aws_lambda_function",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/null",
      "change": {
        "actions": ["create"],
        "before": null,
        "after": {
          "triggers": {
            "original_source_code": "\"./lambda\"",
            "resource_name": "aws_lambda_function.this[0]",
            "resource_type": "ZIP_LAMBDA_FUNCTION",
            "source_code_property": "path"
          }
        },
        "after_unknown": {
          "id": true,
          "triggers": { "built_output_path": true }
        },
        "before_sensitive": false,
        "after_sensitive": { "triggers": {} }
      }
    },
    {
      "address": "module.s3_bucket.aws_s3_bucket.this[0]",
      "module_address": "module.s3_bucket",
      "mode": "managed",
      "type": "aws_s3_bucket",
      "name": "this",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": ["create"],
        "before": null,
        "after": {
          "bucket": "example-bucket",
          "force_destroy": false,
          "object_lock_enabled": false,
          "tags": { "Environment": "Development", "Owner": "User" },
          "tags_all": { "Environment": "Development", "Owner": "User" },
          "timeouts": null
        },
        "after_unknown": {
          "acceleration_status": true,
          "acl": true,
          "arn": true,
          "bucket_domain_name": true,
          "bucket_prefix": true,
          "bucket_regional_domain_name": true,
          "cors_rule": true,
          "grant": true,
          "hosted_zone_id": true,
          "id": true,
          "lifecycle_rule": true,
          "logging": true,
          "object_lock_configuration": true,
          "policy": true,
          "region": true,
          "replication_configuration": true,
          "request_payer": true,
          "server_side_encryption_configuration": true,
          "tags": {},
          "tags_all": {},
          "versioning": true,
          "website": true,
          "website_domain": true,
          "website_endpoint": true
        },
        "before_sensitive": false,
        "after_sensitive": {
          "cors_rule": [],
          "grant": [],
          "lifecycle_rule": [],
          "logging": [],
          "object_lock_configuration": [],
          "replication_configuration": [],
          "server_side_encryption_configuration": [],
          "tags": {},
          "tags_all": {},
          "versioning": [],
          "website": []
        }
      }
    },
    {
      "address": "module.s3_bucket.aws_s3_bucket_acl.this[0]",
      "module_address": "module.s3_bucket",
      "mode": "managed",
      "type": "aws_s3_bucket_acl",
      "name": "this",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": ["create"],
        "before": null,
        "after": { "acl": "private", "expected_bucket_owner": null },
        "after_unknown": {
          "access_control_policy": true,
          "bucket": true,
          "id": true
        },
        "before_sensitive": false,
        "after_sensitive": { "access_control_policy": [] }
      }
    },
    {
      "address": "module.s3_bucket.aws_s3_bucket_public_access_block.this[0]",
      "module_address": "module.s3_bucket",
      "mode": "managed",
      "type": "aws_s3_bucket_public_access_block",
      "name": "this",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": ["create"],
        "before": null,
        "after": {
          "block_public_acls": true,
          "block_public_policy": true,
          "ignore_public_acls": true,
          "restrict_public_buckets": true
        },
        "after_unknown": { "bucket": true, "id": true },
        "before_sensitive": false,
        "after_sensitive": {}
      }
    },
    {
      "address": "module.s3_bucket.aws_s3_bucket_server_side_encryption_configuration.this[0]",
      "module_address": "module.s3_bucket",
      "mode": "managed",
      "type": "aws_s3_bucket_server_side_encryption_configuration",
      "name": "this",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": ["create"],
        "before": null,
        "after": {
          "expected_bucket_owner": null,
          "rule": [
            {
              "apply_server_side_encryption_by_default": [
                { "kms_master_key_id": "", "sse_algorithm": "AES256" }
              ],
              "bucket_key_enabled": null
            }
          ]
        },
        "after_unknown": {
          "bucket": true,
          "id": true,
          "rule": [{ "apply_server_side_encryption_by_default": [{}] }]
        },
        "before_sensitive": false,
        "after_sensitive": {
          "rule": [{ "apply_server_side_encryption_by_default": [{}] }]
        }
      }
    },
    {
      "address": "module.s3_bucket.aws_s3_bucket_versioning.this[0]",
      "module_address": "module.s3_bucket",
      "mode": "managed",
      "type": "aws_s3_bucket_versioning",
      "name": "this",
      "index": 0,
      "provider_name": "registry.terraform.io/hashicorp/aws",
      "change": {
        "actions": ["create"],
        "before": null,
        "after": {
          "expected_bucket_owner": null,
          "mfa": null,
          "versioning_configuration": [{ "status": "Enabled" }]
        },
        "after_unknown": {
          "bucket": true,
          "id": true,
          "versioning_configuration": [{ "mfa_delete": true }]
        },
        "before_sensitive": false,
        "after_sensitive": { "versioning_configuration": [{}] }
      }
    }
  ],
  "prior_state": {
    "format_version": "1.0",
    "terraform_version": "1.10.3",
    "values": {
      "root_module": {
        "child_modules": [
          {
            "resources": [
              {
                "address": "module.s3_bucket.data.aws_caller_identity.current",
                "mode": "data",
                "type": "aws_caller_identity",
                "name": "current",
                "provider_name": "registry.terraform.io/hashicorp/aws",
                "schema_version": 0,
                "values": {
                  "account_id": "000000000000",
                  "arn": "arn:aws:iam::000000000000:root",
                  "id": "000000000000",
                  "user_id": "AKIAIOSFODNN7EXAMPLE"
                },
                "sensitive_values": {}
              },
              {
                "address": "module.s3_bucket.data.aws_canonical_user_id.this[0]",
                "mode": "data",
                "type": "aws_canonical_user_id",
                "name": "this",
                "index": 0,
                "provider_name": "registry.terraform.io/hashicorp/aws",
                "schema_version": 0,
                "values": {
                  "display_name": "webfile",
                  "id": "75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a"
                },
                "sensitive_values": {}
              },
              {
                "address": "module.s3_bucket.data.aws_partition.current",
                "mode": "data",
                "type": "aws_partition",
                "name": "current",
                "provider_name": "registry.terraform.io/hashicorp/aws",
                "schema_version": 0,
                "values": {
                  "dns_suffix": "amazonaws.com",
                  "id": "aws",
                  "partition": "aws",
                  "reverse_dns_prefix": "com.amazonaws"
                },
                "sensitive_values": {}
              },
              {
                "address": "module.s3_bucket.data.aws_region.current",
                "mode": "data",
                "type": "aws_region",
                "name": "current",
                "provider_name": "registry.terraform.io/hashicorp/aws",
                "schema_version": 0,
                "values": {
                  "description": "US East (N. Virginia)",
                  "endpoint": "ec2.us-east-1.amazonaws.com",
                  "id": "us-east-1",
                  "name": "us-east-1"
                },
                "sensitive_values": {}
              }
            ],
            "address": "module.s3_bucket"
          }
        ]
      }
    }
  },
  "configuration": {
    "provider_config": {
      "aws": {
        "name": "aws",
        "full_name": "registry.terraform.io/hashicorp/aws",
        "expressions": {
          "access_key": { "constant_value": "test" },
          "endpoints": [
            {
              "ec2": { "constant_value": "http://localhost:4566" },
              "iam": { "constant_value": "http://localhost:4566" },
              "lambda": { "constant_value": "http://localhost:4566" },
              "s3": { "constant_value": "http://localhost:4566" },
              "sns": { "constant_value": "http://localhost:4566" },
              "sqs": { "constant_value": "http://localhost:4566" },
              "ssm": { "constant_value": "http://localhost:4566" },
              "sts": { "constant_value": "http://localhost:4566" }
            }
          ],
          "region": { "constant_value": "us-east-1" },
          "secret_key": { "constant_value": "test" },
          "skip_credentials_validation": { "constant_value": true },
          "skip_metadata_api_check": { "constant_value": true }
        }
      },
      "module.lambda_function:external": {
        "name": "external",
        "full_name": "registry.terraform.io/hashicorp/external",
        "version_constraint": "\u003e= 1.0.0",
        "module_address": "module.lambda_function"
      },
      "module.lambda_function:local": {
        "name": "local",
        "full_name": "registry.terraform.io/hashicorp/local",
        "version_constraint": "\u003e= 1.0.0",
        "module_address": "module.lambda_function"
      },
      "module.lambda_function:null": {
        "name": "null",
        "full_name": "registry.terraform.io/hashicorp/null",
        "version_constraint": "\u003e= 2.0.0",
        "module_address": "module.lambda_function"
      }
    },
    "root_module": {
      "resources": [
        {
          "address": "aws_iam_policy.lambda_s3_policy",
          "mode": "managed",
          "type": "aws_iam_policy",
          "name": "lambda_s3_policy",
          "provider_config_key": "aws",
          "expressions": {
            "name": { "constant_value": "lambda-s3-policy" },
            "policy": {
              "references": [
                "module.s3_bucket.s3_bucket_arn",
                "module.s3_bucket",
                "module.s3_bucket.s3_bucket_arn",
                "module.s3_bucket"
              ]
            }
          },
          "schema_version": 0,
          "depends_on": ["module.lambda_function", "module.s3_bucket"]
        },
        {
          "address": "aws_iam_policy_attachment.lambda_s3_policy_attachment",
          "mode": "managed",
          "type": "aws_iam_policy_attachment",
          "name": "lambda_s3_policy_attachment",
          "provider_config_key": "aws",
          "expressions": {
            "name": { "constant_value": "lambda-s3-policy-attachment" },
            "policy_arn": {
              "references": [
                "aws_iam_policy.lambda_s3_policy.arn",
                "aws_iam_policy.lambda_s3_policy"
              ]
            },
            "roles": {
              "references": [
                "module.lambda_function.lambda_role_name",
                "module.lambda_function"
              ]
            }
          },
          "schema_version": 0
        },
        {
          "address": "aws_sns_topic.example_topic",
          "mode": "managed",
          "type": "aws_sns_topic",
          "name": "example_topic",
          "provider_config_key": "aws",
          "expressions": { "name": { "constant_value": "example-topic" } },
          "schema_version": 0
        },
        {
          "address": "aws_sns_topic_subscription.example_subscription",
          "mode": "managed",
          "type": "aws_sns_topic_subscription",
          "name": "example_subscription",
          "provider_config_key": "aws",
          "expressions": {
            "endpoint": {
              "references": [
                "aws_sqs_queue.example_queue.arn",
                "aws_sqs_queue.example_queue"
              ]
            },
            "protocol": { "constant_value": "sqs" },
            "topic_arn": {
              "references": [
                "aws_sns_topic.example_topic.arn",
                "aws_sns_topic.example_topic"
              ]
            }
          },
          "schema_version": 0,
          "depends_on": ["aws_sqs_queue_policy.example_policy"]
        },
        {
          "address": "aws_sqs_queue.example_queue",
          "mode": "managed",
          "type": "aws_sqs_queue",
          "name": "example_queue",
          "provider_config_key": "aws",
          "expressions": {
            "name": { "constant_value": "example-queue" },
            "visibility_timeout_seconds": { "constant_value": 30 }
          },
          "schema_version": 0
        },
        {
          "address": "aws_sqs_queue_policy.example_policy",
          "mode": "managed",
          "type": "aws_sqs_queue_policy",
          "name": "example_policy",
          "provider_config_key": "aws",
          "expressions": {
            "policy": {
              "references": [
                "aws_sqs_queue.example_queue.arn",
                "aws_sqs_queue.example_queue",
                "aws_sns_topic.example_topic.arn",
                "aws_sns_topic.example_topic"
              ]
            },
            "queue_url": {
              "references": [
                "aws_sqs_queue.example_queue.id",
                "aws_sqs_queue.example_queue"
              ]
            }
          },
          "schema_version": 1
        }
      ],
      "module_calls": {
        "lambda_function": {
          "source": "terraform-aws-modules/lambda/aws",
          "expressions": {
            "function_name": { "constant_value": "example-lambda" },
            "handler": { "constant_value": "index.handler" },
            "runtime": { "constant_value": "nodejs16.x" },
            "source_path": { "constant_value": "./lambda" }
          },
          "module": {
            "outputs": {
              "lambda_cloudwatch_log_group_arn": {
                "expression": { "references": ["local.log_group_arn"] },
                "description": "The ARN of the Cloudwatch Log Group"
              },
              "lambda_cloudwatch_log_group_name": {
                "expression": { "references": ["local.log_group_name"] },
                "description": "The name of the Cloudwatch Log Group"
              },
              "lambda_event_source_mapping_function_arn": {
                "expression": {
                  "references": ["aws_lambda_event_source_mapping.this"]
                },
                "description": "The the ARN of the Lambda function the event source mapping is sending events to"
              },
              "lambda_event_source_mapping_state": {
                "expression": {
                  "references": ["aws_lambda_event_source_mapping.this"]
                },
                "description": "The state of the event source mapping"
              },
              "lambda_event_source_mapping_state_transition_reason": {
                "expression": {
                  "references": ["aws_lambda_event_source_mapping.this"]
                },
                "description": "The reason the event source mapping is in its current state"
              },
              "lambda_event_source_mapping_uuid": {
                "expression": {
                  "references": ["aws_lambda_event_source_mapping.this"]
                },
                "description": "The UUID of the created event source mapping"
              },
              "lambda_function_arn": {
                "expression": {
                  "references": [
                    "aws_lambda_function.this[0].arn",
                    "aws_lambda_function.this[0]",
                    "aws_lambda_function.this"
                  ]
                },
                "description": "The ARN of the Lambda Function"
              },
              "lambda_function_arn_static": {
                "expression": {
                  "references": [
                    "local.create",
                    "var.create_function",
                    "var.create_layer",
                    "data.aws_region.current.name",
                    "data.aws_region.current",
                    "data.aws_caller_identity.current.account_id",
                    "data.aws_caller_identity.current",
                    "var.function_name"
                  ]
                },
                "description": "The static ARN of the Lambda Function. Use this to avoid cycle errors between resources (e.g., Step Functions)"
              },
              "lambda_function_invoke_arn": {
                "expression": {
                  "references": [
                    "aws_lambda_function.this[0].invoke_arn",
                    "aws_lambda_function.this[0]",
                    "aws_lambda_function.this"
                  ]
                },
                "description": "The Invoke ARN of the Lambda Function"
              },
              "lambda_function_kms_key_arn": {
                "expression": {
                  "references": [
                    "aws_lambda_function.this[0].kms_key_arn",
                    "aws_lambda_function.this[0]",
                    "aws_lambda_function.this"
                  ]
                },
                "description": "The ARN for the KMS encryption key of Lambda Function"
              },
              "lambda_function_last_modified": {
                "expression": {
                  "references": [
                    "aws_lambda_function.this[0].last_modified",
                    "aws_lambda_function.this[0]",
                    "aws_lambda_function.this"
                  ]
                },
                "description": "The date Lambda Function resource was last modified"
              },
              "lambda_function_name": {
                "expression": {
                  "references": [
                    "aws_lambda_function.this[0].function_name",
                    "aws_lambda_function.this[0]",
                    "aws_lambda_function.this"
                  ]
                },
                "description": "The name of the Lambda Function"
              },
              "lambda_function_qualified_arn": {
                "expression": {
                  "references": [
                    "aws_lambda_function.this[0].qualified_arn",
                    "aws_lambda_function.this[0]",
                    "aws_lambda_function.this"
                  ]
                },
                "description": "The ARN identifying your Lambda Function Version"
              },
              "lambda_function_qualified_invoke_arn": {
                "expression": {
                  "references": [
                    "aws_lambda_function.this[0].qualified_invoke_arn",
                    "aws_lambda_function.this[0]",
                    "aws_lambda_function.this"
                  ]
                },
                "description": "The Invoke ARN identifying your Lambda Function Version"
              },
              "lambda_function_signing_job_arn": {
                "expression": {
                  "references": [
                    "aws_lambda_function.this[0].signing_job_arn",
                    "aws_lambda_function.this[0]",
                    "aws_lambda_function.this"
                  ]
                },
                "description": "ARN of the signing job"
              },
              "lambda_function_signing_profile_version_arn": {
                "expression": {
                  "references": [
                    "aws_lambda_function.this[0].signing_profile_version_arn",
                    "aws_lambda_function.this[0]",
                    "aws_lambda_function.this"
                  ]
                },
                "description": "ARN of the signing profile version"
              },
              "lambda_function_source_code_hash": {
                "expression": {
                  "references": [
                    "aws_lambda_function.this[0].source_code_hash",
                    "aws_lambda_function.this[0]",
                    "aws_lambda_function.this"
                  ]
                },
                "description": "Base64-encoded representation of raw SHA-256 sum of the zip file"
              },
              "lambda_function_source_code_size": {
                "expression": {
                  "references": [
                    "aws_lambda_function.this[0].source_code_size",
                    "aws_lambda_function.this[0]",
                    "aws_lambda_function.this"
                  ]
                },
                "description": "The size in bytes of the function .zip file"
              },
              "lambda_function_url": {
                "expression": {
                  "references": [
                    "aws_lambda_function_url.this[0].function_url",
                    "aws_lambda_function_url.this[0]",
                    "aws_lambda_function_url.this"
                  ]
                },
                "description": "The URL of the Lambda Function URL"
              },
              "lambda_function_url_id": {
                "expression": {
                  "references": [
                    "aws_lambda_function_url.this[0].url_id",
                    "aws_lambda_function_url.this[0]",
                    "aws_lambda_function_url.this"
                  ]
                },
                "description": "The Lambda Function URL generated id"
              },
              "lambda_function_version": {
                "expression": {
                  "references": [
                    "aws_lambda_function.this[0].version",
                    "aws_lambda_function.this[0]",
                    "aws_lambda_function.this"
                  ]
                },
                "description": "Latest published version of Lambda Function"
              },
              "lambda_layer_arn": {
                "expression": {
                  "references": [
                    "aws_lambda_layer_version.this[0].arn",
                    "aws_lambda_layer_version.this[0]",
                    "aws_lambda_layer_version.this"
                  ]
                },
                "description": "The ARN of the Lambda Layer with version"
              },
              "lambda_layer_created_date": {
                "expression": {
                  "references": [
                    "aws_lambda_layer_version.this[0].created_date",
                    "aws_lambda_layer_version.this[0]",
                    "aws_lambda_layer_version.this"
                  ]
                },
                "description": "The date Lambda Layer resource was created"
              },
              "lambda_layer_layer_arn": {
                "expression": {
                  "references": [
                    "aws_lambda_layer_version.this[0].layer_arn",
                    "aws_lambda_layer_version.this[0]",
                    "aws_lambda_layer_version.this"
                  ]
                },
                "description": "The ARN of the Lambda Layer without version"
              },
              "lambda_layer_source_code_size": {
                "expression": {
                  "references": [
                    "aws_lambda_layer_version.this[0].source_code_size",
                    "aws_lambda_layer_version.this[0]",
                    "aws_lambda_layer_version.this"
                  ]
                },
                "description": "The size in bytes of the Lambda Layer .zip file"
              },
              "lambda_layer_version": {
                "expression": {
                  "references": [
                    "aws_lambda_layer_version.this[0].version",
                    "aws_lambda_layer_version.this[0]",
                    "aws_lambda_layer_version.this"
                  ]
                },
                "description": "The Lambda Layer version"
              },
              "lambda_role_arn": {
                "expression": {
                  "references": [
                    "aws_iam_role.lambda[0].arn",
                    "aws_iam_role.lambda[0]",
                    "aws_iam_role.lambda"
                  ]
                },
                "description": "The ARN of the IAM role created for the Lambda Function"
              },
              "lambda_role_name": {
                "expression": {
                  "references": [
                    "aws_iam_role.lambda[0].name",
                    "aws_iam_role.lambda[0]",
                    "aws_iam_role.lambda"
                  ]
                },
                "description": "The name of the IAM role created for the Lambda Function"
              },
              "lambda_role_unique_id": {
                "expression": {
                  "references": [
                    "aws_iam_role.lambda[0].unique_id",
                    "aws_iam_role.lambda[0]",
                    "aws_iam_role.lambda"
                  ]
                },
                "description": "The unique id of the IAM role created for the Lambda Function"
              },
              "local_filename": {
                "expression": { "references": ["local.filename"] },
                "depends_on": ["null_resource.archive"],
                "description": "The filename of zip archive deployed (if deployment was from local)"
              },
              "s3_object": {
                "expression": {
                  "references": [
                    "local.s3_bucket",
                    "local.s3_key",
                    "local.s3_object_version"
                  ]
                },
                "description": "The map with S3 object data of zip archive deployed (if deployment was from S3)"
              }
            },
            "resources": [
              {
                "address": "aws_cloudwatch_log_group.lambda",
                "mode": "managed",
                "type": "aws_cloudwatch_log_group",
                "name": "lambda",
                "provider_config_key": "aws",
                "expressions": {
                  "kms_key_id": {
                    "references": ["var.cloudwatch_logs_kms_key_id"]
                  },
                  "name": {
                    "references": ["var.lambda_at_edge", "var.function_name"]
                  },
                  "retention_in_days": {
                    "references": ["var.cloudwatch_logs_retention_in_days"]
                  },
                  "tags": {
                    "references": ["var.tags", "var.cloudwatch_logs_tags"]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create",
                    "var.create_function",
                    "var.create_layer",
                    "var.use_existing_cloudwatch_log_group"
                  ]
                }
              },
              {
                "address": "aws_iam_policy.additional_inline",
                "mode": "managed",
                "type": "aws_iam_policy",
                "name": "additional_inline",
                "provider_config_key": "aws",
                "expressions": {
                  "name": { "references": ["local.policy_name"] },
                  "path": { "references": ["var.policy_path"] },
                  "policy": {
                    "references": [
                      "data.aws_iam_policy_document.additional_inline[0].json",
                      "data.aws_iam_policy_document.additional_inline[0]",
                      "data.aws_iam_policy_document.additional_inline"
                    ]
                  },
                  "tags": { "references": ["var.tags"] }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_role",
                    "var.attach_policy_statements"
                  ]
                }
              },
              {
                "address": "aws_iam_policy.additional_json",
                "mode": "managed",
                "type": "aws_iam_policy",
                "name": "additional_json",
                "provider_config_key": "aws",
                "expressions": {
                  "name": { "references": ["local.policy_name"] },
                  "path": { "references": ["var.policy_path"] },
                  "policy": { "references": ["var.policy_json"] },
                  "tags": { "references": ["var.tags"] }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": ["local.create_role", "var.attach_policy_json"]
                }
              },
              {
                "address": "aws_iam_policy.additional_jsons",
                "mode": "managed",
                "type": "aws_iam_policy",
                "name": "additional_jsons",
                "provider_config_key": "aws",
                "expressions": {
                  "name": {
                    "references": ["local.policy_name", "count.index"]
                  },
                  "path": { "references": ["var.policy_path"] },
                  "policy": {
                    "references": ["var.policy_jsons", "count.index"]
                  },
                  "tags": { "references": ["var.tags"] }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_role",
                    "var.attach_policy_jsons",
                    "var.number_of_policy_jsons"
                  ]
                }
              },
              {
                "address": "aws_iam_policy.async",
                "mode": "managed",
                "type": "aws_iam_policy",
                "name": "async",
                "provider_config_key": "aws",
                "expressions": {
                  "name": { "references": ["local.policy_name"] },
                  "path": { "references": ["var.policy_path"] },
                  "policy": {
                    "references": [
                      "data.aws_iam_policy_document.async[0].json",
                      "data.aws_iam_policy_document.async[0]",
                      "data.aws_iam_policy_document.async"
                    ]
                  },
                  "tags": { "references": ["var.tags"] }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_role",
                    "var.attach_async_event_policy"
                  ]
                }
              },
              {
                "address": "aws_iam_policy.dead_letter",
                "mode": "managed",
                "type": "aws_iam_policy",
                "name": "dead_letter",
                "provider_config_key": "aws",
                "expressions": {
                  "name": { "references": ["local.policy_name"] },
                  "path": { "references": ["var.policy_path"] },
                  "policy": {
                    "references": [
                      "data.aws_iam_policy_document.dead_letter[0].json",
                      "data.aws_iam_policy_document.dead_letter[0]",
                      "data.aws_iam_policy_document.dead_letter"
                    ]
                  },
                  "tags": { "references": ["var.tags"] }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_role",
                    "var.attach_dead_letter_policy"
                  ]
                }
              },
              {
                "address": "aws_iam_policy.logs",
                "mode": "managed",
                "type": "aws_iam_policy",
                "name": "logs",
                "provider_config_key": "aws",
                "expressions": {
                  "name": { "references": ["local.policy_name"] },
                  "path": { "references": ["var.policy_path"] },
                  "policy": {
                    "references": [
                      "data.aws_iam_policy_document.logs[0].json",
                      "data.aws_iam_policy_document.logs[0]",
                      "data.aws_iam_policy_document.logs"
                    ]
                  },
                  "tags": { "references": ["var.tags"] }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_role",
                    "var.attach_cloudwatch_logs_policy"
                  ]
                }
              },
              {
                "address": "aws_iam_policy.tracing",
                "mode": "managed",
                "type": "aws_iam_policy",
                "name": "tracing",
                "provider_config_key": "aws",
                "expressions": {
                  "name": { "references": ["local.policy_name"] },
                  "path": { "references": ["var.policy_path"] },
                  "policy": {
                    "references": [
                      "data.aws_iam_policy.tracing[0].policy",
                      "data.aws_iam_policy.tracing[0]",
                      "data.aws_iam_policy.tracing"
                    ]
                  },
                  "tags": { "references": ["var.tags"] }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_role",
                    "var.attach_tracing_policy"
                  ]
                }
              },
              {
                "address": "aws_iam_policy.vpc",
                "mode": "managed",
                "type": "aws_iam_policy",
                "name": "vpc",
                "provider_config_key": "aws",
                "expressions": {
                  "name": { "references": ["local.policy_name"] },
                  "path": { "references": ["var.policy_path"] },
                  "policy": {
                    "references": [
                      "data.aws_iam_policy.vpc[0].policy",
                      "data.aws_iam_policy.vpc[0]",
                      "data.aws_iam_policy.vpc"
                    ]
                  },
                  "tags": { "references": ["var.tags"] }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_role",
                    "var.attach_network_policy"
                  ]
                }
              },
              {
                "address": "aws_iam_role.lambda",
                "mode": "managed",
                "type": "aws_iam_role",
                "name": "lambda",
                "provider_config_key": "aws",
                "expressions": {
                  "assume_role_policy": {
                    "references": [
                      "data.aws_iam_policy_document.assume_role[0].json",
                      "data.aws_iam_policy_document.assume_role[0]",
                      "data.aws_iam_policy_document.assume_role"
                    ]
                  },
                  "description": { "references": ["var.role_description"] },
                  "force_detach_policies": {
                    "references": ["var.role_force_detach_policies"]
                  },
                  "max_session_duration": {
                    "references": ["var.role_maximum_session_duration"]
                  },
                  "name": { "references": ["local.role_name"] },
                  "path": { "references": ["var.role_path"] },
                  "permissions_boundary": {
                    "references": ["var.role_permissions_boundary"]
                  },
                  "tags": { "references": ["var.tags", "var.role_tags"] }
                },
                "schema_version": 0,
                "count_expression": { "references": ["local.create_role"] }
              },
              {
                "address": "aws_iam_role_policy_attachment.additional_inline",
                "mode": "managed",
                "type": "aws_iam_role_policy_attachment",
                "name": "additional_inline",
                "provider_config_key": "aws",
                "expressions": {
                  "policy_arn": {
                    "references": [
                      "aws_iam_policy.additional_inline[0].arn",
                      "aws_iam_policy.additional_inline[0]",
                      "aws_iam_policy.additional_inline"
                    ]
                  },
                  "role": {
                    "references": [
                      "aws_iam_role.lambda[0].name",
                      "aws_iam_role.lambda[0]",
                      "aws_iam_role.lambda"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_role",
                    "var.attach_policy_statements"
                  ]
                }
              },
              {
                "address": "aws_iam_role_policy_attachment.additional_json",
                "mode": "managed",
                "type": "aws_iam_role_policy_attachment",
                "name": "additional_json",
                "provider_config_key": "aws",
                "expressions": {
                  "policy_arn": {
                    "references": [
                      "aws_iam_policy.additional_json[0].arn",
                      "aws_iam_policy.additional_json[0]",
                      "aws_iam_policy.additional_json"
                    ]
                  },
                  "role": {
                    "references": [
                      "aws_iam_role.lambda[0].name",
                      "aws_iam_role.lambda[0]",
                      "aws_iam_role.lambda"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": ["local.create_role", "var.attach_policy_json"]
                }
              },
              {
                "address": "aws_iam_role_policy_attachment.additional_jsons",
                "mode": "managed",
                "type": "aws_iam_role_policy_attachment",
                "name": "additional_jsons",
                "provider_config_key": "aws",
                "expressions": {
                  "policy_arn": {
                    "references": [
                      "aws_iam_policy.additional_jsons",
                      "count.index"
                    ]
                  },
                  "role": {
                    "references": [
                      "aws_iam_role.lambda[0].name",
                      "aws_iam_role.lambda[0]",
                      "aws_iam_role.lambda"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_role",
                    "var.attach_policy_jsons",
                    "var.number_of_policy_jsons"
                  ]
                }
              },
              {
                "address": "aws_iam_role_policy_attachment.additional_many",
                "mode": "managed",
                "type": "aws_iam_role_policy_attachment",
                "name": "additional_many",
                "provider_config_key": "aws",
                "expressions": {
                  "policy_arn": {
                    "references": ["var.policies", "count.index"]
                  },
                  "role": {
                    "references": [
                      "aws_iam_role.lambda[0].name",
                      "aws_iam_role.lambda[0]",
                      "aws_iam_role.lambda"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_role",
                    "var.attach_policies",
                    "var.number_of_policies"
                  ]
                }
              },
              {
                "address": "aws_iam_role_policy_attachment.additional_one",
                "mode": "managed",
                "type": "aws_iam_role_policy_attachment",
                "name": "additional_one",
                "provider_config_key": "aws",
                "expressions": {
                  "policy_arn": { "references": ["var.policy"] },
                  "role": {
                    "references": [
                      "aws_iam_role.lambda[0].name",
                      "aws_iam_role.lambda[0]",
                      "aws_iam_role.lambda"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": ["local.create_role", "var.attach_policy"]
                }
              },
              {
                "address": "aws_iam_role_policy_attachment.async",
                "mode": "managed",
                "type": "aws_iam_role_policy_attachment",
                "name": "async",
                "provider_config_key": "aws",
                "expressions": {
                  "policy_arn": {
                    "references": [
                      "aws_iam_policy.async[0].arn",
                      "aws_iam_policy.async[0]",
                      "aws_iam_policy.async"
                    ]
                  },
                  "role": {
                    "references": [
                      "aws_iam_role.lambda[0].name",
                      "aws_iam_role.lambda[0]",
                      "aws_iam_role.lambda"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_role",
                    "var.attach_async_event_policy"
                  ]
                }
              },
              {
                "address": "aws_iam_role_policy_attachment.dead_letter",
                "mode": "managed",
                "type": "aws_iam_role_policy_attachment",
                "name": "dead_letter",
                "provider_config_key": "aws",
                "expressions": {
                  "policy_arn": {
                    "references": [
                      "aws_iam_policy.dead_letter[0].arn",
                      "aws_iam_policy.dead_letter[0]",
                      "aws_iam_policy.dead_letter"
                    ]
                  },
                  "role": {
                    "references": [
                      "aws_iam_role.lambda[0].name",
                      "aws_iam_role.lambda[0]",
                      "aws_iam_role.lambda"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_role",
                    "var.attach_dead_letter_policy"
                  ]
                }
              },
              {
                "address": "aws_iam_role_policy_attachment.logs",
                "mode": "managed",
                "type": "aws_iam_role_policy_attachment",
                "name": "logs",
                "provider_config_key": "aws",
                "expressions": {
                  "policy_arn": {
                    "references": [
                      "aws_iam_policy.logs[0].arn",
                      "aws_iam_policy.logs[0]",
                      "aws_iam_policy.logs"
                    ]
                  },
                  "role": {
                    "references": [
                      "aws_iam_role.lambda[0].name",
                      "aws_iam_role.lambda[0]",
                      "aws_iam_role.lambda"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_role",
                    "var.attach_cloudwatch_logs_policy"
                  ]
                }
              },
              {
                "address": "aws_iam_role_policy_attachment.tracing",
                "mode": "managed",
                "type": "aws_iam_role_policy_attachment",
                "name": "tracing",
                "provider_config_key": "aws",
                "expressions": {
                  "policy_arn": {
                    "references": [
                      "aws_iam_policy.tracing[0].arn",
                      "aws_iam_policy.tracing[0]",
                      "aws_iam_policy.tracing"
                    ]
                  },
                  "role": {
                    "references": [
                      "aws_iam_role.lambda[0].name",
                      "aws_iam_role.lambda[0]",
                      "aws_iam_role.lambda"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_role",
                    "var.attach_tracing_policy"
                  ]
                }
              },
              {
                "address": "aws_iam_role_policy_attachment.vpc",
                "mode": "managed",
                "type": "aws_iam_role_policy_attachment",
                "name": "vpc",
                "provider_config_key": "aws",
                "expressions": {
                  "policy_arn": {
                    "references": [
                      "aws_iam_policy.vpc[0].arn",
                      "aws_iam_policy.vpc[0]",
                      "aws_iam_policy.vpc"
                    ]
                  },
                  "role": {
                    "references": [
                      "aws_iam_role.lambda[0].name",
                      "aws_iam_role.lambda[0]",
                      "aws_iam_role.lambda"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_role",
                    "var.attach_network_policy"
                  ]
                }
              },
              {
                "address": "aws_lambda_event_source_mapping.this",
                "mode": "managed",
                "type": "aws_lambda_event_source_mapping",
                "name": "this",
                "provider_config_key": "aws",
                "expressions": {
                  "batch_size": {
                    "references": ["each.value.batch_size", "each.value"]
                  },
                  "bisect_batch_on_function_error": {
                    "references": [
                      "each.value.bisect_batch_on_function_error",
                      "each.value"
                    ]
                  },
                  "enabled": {
                    "references": ["each.value.enabled", "each.value"]
                  },
                  "event_source_arn": {
                    "references": ["each.value.event_source_arn", "each.value"]
                  },
                  "function_name": {
                    "references": [
                      "aws_lambda_function.this[0].arn",
                      "aws_lambda_function.this[0]",
                      "aws_lambda_function.this"
                    ]
                  },
                  "function_response_types": {
                    "references": [
                      "each.value.function_response_types",
                      "each.value"
                    ]
                  },
                  "maximum_batching_window_in_seconds": {
                    "references": [
                      "each.value.maximum_batching_window_in_seconds",
                      "each.value"
                    ]
                  },
                  "maximum_record_age_in_seconds": {
                    "references": [
                      "each.value.maximum_record_age_in_seconds",
                      "each.value"
                    ]
                  },
                  "maximum_retry_attempts": {
                    "references": [
                      "each.value.maximum_retry_attempts",
                      "each.value"
                    ]
                  },
                  "parallelization_factor": {
                    "references": [
                      "each.value.parallelization_factor",
                      "each.value"
                    ]
                  },
                  "queues": {
                    "references": ["each.value.queues", "each.value"]
                  },
                  "starting_position": {
                    "references": ["each.value.starting_position", "each.value"]
                  },
                  "starting_position_timestamp": {
                    "references": [
                      "each.value.starting_position_timestamp",
                      "each.value"
                    ]
                  },
                  "topics": {
                    "references": ["each.value.topics", "each.value"]
                  }
                },
                "schema_version": 0,
                "for_each_expression": {
                  "references": [
                    "var.event_source_mapping",
                    "local.create",
                    "var.create_function",
                    "var.create_layer",
                    "var.create_unqualified_alias_allowed_triggers"
                  ]
                }
              },
              {
                "address": "aws_lambda_function.this",
                "mode": "managed",
                "type": "aws_lambda_function",
                "name": "this",
                "provider_config_key": "aws",
                "expressions": {
                  "architectures": { "references": ["var.architectures"] },
                  "code_signing_config_arn": {
                    "references": ["var.code_signing_config_arn"]
                  },
                  "description": { "references": ["var.description"] },
                  "filename": { "references": ["local.filename"] },
                  "function_name": { "references": ["var.function_name"] },
                  "handler": {
                    "references": ["var.package_type", "var.handler"]
                  },
                  "image_uri": { "references": ["var.image_uri"] },
                  "kms_key_arn": { "references": ["var.kms_key_arn"] },
                  "layers": { "references": ["var.layers"] },
                  "memory_size": { "references": ["var.memory_size"] },
                  "package_type": { "references": ["var.package_type"] },
                  "publish": {
                    "references": [
                      "var.lambda_at_edge",
                      "var.snap_start",
                      "var.publish"
                    ]
                  },
                  "replace_security_groups_on_destroy": {
                    "references": ["var.replace_security_groups_on_destroy"]
                  },
                  "replacement_security_group_ids": {
                    "references": ["var.replacement_security_group_ids"]
                  },
                  "reserved_concurrent_executions": {
                    "references": ["var.reserved_concurrent_executions"]
                  },
                  "role": {
                    "references": [
                      "var.create_role",
                      "aws_iam_role.lambda[0].arn",
                      "aws_iam_role.lambda[0]",
                      "aws_iam_role.lambda",
                      "var.lambda_role"
                    ]
                  },
                  "runtime": {
                    "references": ["var.package_type", "var.runtime"]
                  },
                  "s3_bucket": { "references": ["local.s3_bucket"] },
                  "s3_key": { "references": ["local.s3_key"] },
                  "s3_object_version": {
                    "references": ["local.s3_object_version"]
                  },
                  "source_code_hash": {
                    "references": [
                      "var.ignore_source_code_hash",
                      "local.filename",
                      "local.filename",
                      "local.was_missing",
                      "local.filename"
                    ]
                  },
                  "tags": { "references": ["var.tags"] },
                  "timeout": {
                    "references": [
                      "var.lambda_at_edge",
                      "var.timeout",
                      "var.timeout"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create",
                    "var.create_function",
                    "var.create_layer"
                  ]
                },
                "depends_on": [
                  "null_resource.archive",
                  "aws_s3_object.lambda_package",
                  "aws_cloudwatch_log_group.lambda",
                  "aws_iam_role_policy_attachment.additional_inline",
                  "aws_iam_role_policy_attachment.additional_json",
                  "aws_iam_role_policy_attachment.additional_jsons",
                  "aws_iam_role_policy_attachment.additional_many",
                  "aws_iam_role_policy_attachment.additional_one",
                  "aws_iam_role_policy_attachment.async",
                  "aws_iam_role_policy_attachment.logs",
                  "aws_iam_role_policy_attachment.dead_letter",
                  "aws_iam_role_policy_attachment.vpc",
                  "aws_iam_role_policy_attachment.tracing"
                ]
              },
              {
                "address": "aws_lambda_function_event_invoke_config.this",
                "mode": "managed",
                "type": "aws_lambda_function_event_invoke_config",
                "name": "this",
                "provider_config_key": "aws",
                "expressions": {
                  "function_name": {
                    "references": [
                      "aws_lambda_function.this[0].function_name",
                      "aws_lambda_function.this[0]",
                      "aws_lambda_function.this"
                    ]
                  },
                  "maximum_event_age_in_seconds": {
                    "references": ["var.maximum_event_age_in_seconds"]
                  },
                  "maximum_retry_attempts": {
                    "references": ["var.maximum_retry_attempts"]
                  },
                  "qualifier": {
                    "references": [
                      "each.key",
                      "aws_lambda_function.this[0].version",
                      "aws_lambda_function.this[0]",
                      "aws_lambda_function.this"
                    ]
                  }
                },
                "schema_version": 0,
                "for_each_expression": {
                  "references": [
                    "local.qualifiers",
                    "local.create",
                    "var.create_function",
                    "var.create_layer",
                    "var.create_async_event_config"
                  ]
                }
              },
              {
                "address": "aws_lambda_function_url.this",
                "mode": "managed",
                "type": "aws_lambda_function_url",
                "name": "this",
                "provider_config_key": "aws",
                "expressions": {
                  "authorization_type": {
                    "references": ["var.authorization_type"]
                  },
                  "function_name": {
                    "references": [
                      "aws_lambda_function.this[0].function_name",
                      "aws_lambda_function.this[0]",
                      "aws_lambda_function.this"
                    ]
                  },
                  "invoke_mode": { "references": ["var.invoke_mode"] },
                  "qualifier": {
                    "references": [
                      "var.create_unqualified_alias_lambda_function_url",
                      "aws_lambda_function.this[0].version",
                      "aws_lambda_function.this[0]",
                      "aws_lambda_function.this"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create",
                    "var.create_function",
                    "var.create_layer",
                    "var.create_lambda_function_url"
                  ]
                }
              },
              {
                "address": "aws_lambda_layer_version.this",
                "mode": "managed",
                "type": "aws_lambda_layer_version",
                "name": "this",
                "provider_config_key": "aws",
                "expressions": {
                  "compatible_architectures": {
                    "references": ["var.compatible_architectures"]
                  },
                  "compatible_runtimes": {
                    "references": [
                      "var.compatible_runtimes",
                      "var.compatible_runtimes",
                      "var.runtime"
                    ]
                  },
                  "description": { "references": ["var.description"] },
                  "filename": { "references": ["local.filename"] },
                  "layer_name": { "references": ["var.layer_name"] },
                  "license_info": { "references": ["var.license_info"] },
                  "s3_bucket": { "references": ["local.s3_bucket"] },
                  "s3_key": { "references": ["local.s3_key"] },
                  "s3_object_version": {
                    "references": ["local.s3_object_version"]
                  },
                  "skip_destroy": { "references": ["var.layer_skip_destroy"] },
                  "source_code_hash": {
                    "references": [
                      "var.ignore_source_code_hash",
                      "local.filename",
                      "local.filename",
                      "local.was_missing",
                      "local.filename"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": ["local.create", "var.create_layer"]
                },
                "depends_on": [
                  "null_resource.archive",
                  "aws_s3_object.lambda_package"
                ]
              },
              {
                "address": "aws_lambda_permission.current_version_triggers",
                "mode": "managed",
                "type": "aws_lambda_permission",
                "name": "current_version_triggers",
                "provider_config_key": "aws",
                "expressions": {
                  "action": {
                    "references": ["each.value.action", "each.value"]
                  },
                  "event_source_token": {
                    "references": [
                      "each.value.event_source_token",
                      "each.value"
                    ]
                  },
                  "function_name": {
                    "references": [
                      "aws_lambda_function.this[0].function_name",
                      "aws_lambda_function.this[0]",
                      "aws_lambda_function.this"
                    ]
                  },
                  "principal": {
                    "references": [
                      "each.value.principal",
                      "each.value",
                      "each.value.service",
                      "each.value"
                    ]
                  },
                  "principal_org_id": {
                    "references": ["each.value.principal_org_id", "each.value"]
                  },
                  "qualifier": {
                    "references": [
                      "aws_lambda_function.this[0].version",
                      "aws_lambda_function.this[0]",
                      "aws_lambda_function.this"
                    ]
                  },
                  "source_account": {
                    "references": ["each.value.source_account", "each.value"]
                  },
                  "source_arn": {
                    "references": ["each.value.source_arn", "each.value"]
                  },
                  "statement_id": {
                    "references": [
                      "each.value.statement_id",
                      "each.value",
                      "each.key"
                    ]
                  }
                },
                "schema_version": 0,
                "for_each_expression": {
                  "references": [
                    "var.allowed_triggers",
                    "local.create",
                    "var.create_function",
                    "var.create_layer",
                    "var.create_current_version_allowed_triggers"
                  ]
                }
              },
              {
                "address": "aws_lambda_permission.unqualified_alias_triggers",
                "mode": "managed",
                "type": "aws_lambda_permission",
                "name": "unqualified_alias_triggers",
                "provider_config_key": "aws",
                "expressions": {
                  "action": {
                    "references": ["each.value.action", "each.value"]
                  },
                  "event_source_token": {
                    "references": [
                      "each.value.event_source_token",
                      "each.value"
                    ]
                  },
                  "function_name": {
                    "references": [
                      "aws_lambda_function.this[0].function_name",
                      "aws_lambda_function.this[0]",
                      "aws_lambda_function.this"
                    ]
                  },
                  "principal": {
                    "references": [
                      "each.value.principal",
                      "each.value",
                      "each.value.service",
                      "each.value"
                    ]
                  },
                  "principal_org_id": {
                    "references": ["each.value.principal_org_id", "each.value"]
                  },
                  "source_account": {
                    "references": ["each.value.source_account", "each.value"]
                  },
                  "source_arn": {
                    "references": ["each.value.source_arn", "each.value"]
                  },
                  "statement_id": {
                    "references": [
                      "each.value.statement_id",
                      "each.value",
                      "each.key"
                    ]
                  }
                },
                "schema_version": 0,
                "for_each_expression": {
                  "references": [
                    "var.allowed_triggers",
                    "local.create",
                    "var.create_function",
                    "var.create_layer",
                    "var.create_unqualified_alias_allowed_triggers"
                  ]
                }
              },
              {
                "address": "aws_lambda_provisioned_concurrency_config.current_version",
                "mode": "managed",
                "type": "aws_lambda_provisioned_concurrency_config",
                "name": "current_version",
                "provider_config_key": "aws",
                "expressions": {
                  "function_name": {
                    "references": [
                      "aws_lambda_function.this[0].function_name",
                      "aws_lambda_function.this[0]",
                      "aws_lambda_function.this"
                    ]
                  },
                  "provisioned_concurrent_executions": {
                    "references": ["var.provisioned_concurrent_executions"]
                  },
                  "qualifier": {
                    "references": [
                      "aws_lambda_function.this[0].version",
                      "aws_lambda_function.this[0]",
                      "aws_lambda_function.this"
                    ]
                  }
                },
                "schema_version": 1,
                "count_expression": {
                  "references": [
                    "local.create",
                    "var.create_function",
                    "var.create_layer",
                    "var.provisioned_concurrent_executions"
                  ]
                }
              },
              {
                "address": "aws_s3_object.lambda_package",
                "mode": "managed",
                "type": "aws_s3_object",
                "name": "lambda_package",
                "provider_config_key": "aws",
                "expressions": {
                  "acl": { "references": ["var.s3_acl"] },
                  "bucket": { "references": ["var.s3_bucket"] },
                  "key": { "references": ["local.s3_key"] },
                  "server_side_encryption": {
                    "references": ["var.s3_server_side_encryption"]
                  },
                  "source": {
                    "references": [
                      "data.external.archive_prepare[0].result.filename",
                      "data.external.archive_prepare[0].result",
                      "data.external.archive_prepare[0]",
                      "data.external.archive_prepare"
                    ]
                  },
                  "storage_class": {
                    "references": ["var.s3_object_storage_class"]
                  },
                  "tags": {
                    "references": [
                      "var.s3_object_tags_only",
                      "var.s3_object_tags",
                      "var.tags",
                      "var.s3_object_tags"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create",
                    "var.store_on_s3",
                    "var.create_package"
                  ]
                },
                "depends_on": ["null_resource.archive"]
              },
              {
                "address": "local_file.archive_plan",
                "mode": "managed",
                "type": "local_file",
                "name": "archive_plan",
                "provider_config_key": "module.lambda_function:local",
                "expressions": {
                  "content": {
                    "references": [
                      "data.external.archive_prepare[0].result.build_plan",
                      "data.external.archive_prepare[0].result",
                      "data.external.archive_prepare[0]",
                      "data.external.archive_prepare"
                    ]
                  },
                  "directory_permission": { "constant_value": "0755" },
                  "file_permission": { "constant_value": "0644" },
                  "filename": {
                    "references": [
                      "data.external.archive_prepare[0].result.build_plan_filename",
                      "data.external.archive_prepare[0].result",
                      "data.external.archive_prepare[0]",
                      "data.external.archive_prepare"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": ["var.create", "var.create_package"]
                }
              },
              {
                "address": "null_resource.archive",
                "mode": "managed",
                "type": "null_resource",
                "name": "archive",
                "provider_config_key": "module.lambda_function:null",
                "provisioners": [
                  {
                    "type": "local-exec",
                    "expressions": {
                      "command": {
                        "references": [
                          "data.external.archive_prepare[0].result.build_plan_filename",
                          "data.external.archive_prepare[0].result",
                          "data.external.archive_prepare[0]",
                          "data.external.archive_prepare"
                        ]
                      },
                      "interpreter": {
                        "references": [
                          "local.python",
                          "path.module",
                          "data.external.archive_prepare[0].result.timestamp",
                          "data.external.archive_prepare[0].result",
                          "data.external.archive_prepare[0]",
                          "data.external.archive_prepare"
                        ]
                      }
                    }
                  }
                ],
                "expressions": {
                  "triggers": {
                    "references": [
                      "data.external.archive_prepare[0].result.filename",
                      "data.external.archive_prepare[0].result",
                      "data.external.archive_prepare[0]",
                      "data.external.archive_prepare",
                      "data.external.archive_prepare[0].result.timestamp",
                      "data.external.archive_prepare[0].result",
                      "data.external.archive_prepare[0]",
                      "data.external.archive_prepare"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": ["var.create", "var.create_package"]
                },
                "depends_on": ["local_file.archive_plan"]
              },
              {
                "address": "null_resource.sam_metadata_aws_lambda_function",
                "mode": "managed",
                "type": "null_resource",
                "name": "sam_metadata_aws_lambda_function",
                "provider_config_key": "module.lambda_function:null",
                "expressions": {
                  "triggers": {
                    "references": [
                      "var.source_path",
                      "data.external.archive_prepare[0].result.filename",
                      "data.external.archive_prepare[0].result",
                      "data.external.archive_prepare[0]",
                      "data.external.archive_prepare"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create",
                    "var.create_package",
                    "var.create_function",
                    "var.create_layer"
                  ]
                },
                "depends_on": [
                  "data.external.archive_prepare",
                  "null_resource.archive"
                ]
              },
              {
                "address": "null_resource.sam_metadata_aws_lambda_layer_version",
                "mode": "managed",
                "type": "null_resource",
                "name": "sam_metadata_aws_lambda_layer_version",
                "provider_config_key": "module.lambda_function:null",
                "expressions": {
                  "triggers": {
                    "references": [
                      "var.source_path",
                      "data.external.archive_prepare[0].result.filename",
                      "data.external.archive_prepare[0].result",
                      "data.external.archive_prepare[0]",
                      "data.external.archive_prepare"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create",
                    "var.create_package",
                    "var.create_layer"
                  ]
                },
                "depends_on": [
                  "data.external.archive_prepare",
                  "null_resource.archive"
                ]
              },
              {
                "address": "data.aws_arn.log_group_arn",
                "mode": "data",
                "type": "aws_arn",
                "name": "log_group_arn",
                "provider_config_key": "aws",
                "expressions": {
                  "arn": { "references": ["local.log_group_arn_regional"] }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": ["local.create_role", "var.lambda_at_edge"]
                }
              },
              {
                "address": "data.aws_caller_identity.current",
                "mode": "data",
                "type": "aws_caller_identity",
                "name": "current",
                "provider_config_key": "aws",
                "schema_version": 0
              },
              {
                "address": "data.aws_cloudwatch_log_group.lambda",
                "mode": "data",
                "type": "aws_cloudwatch_log_group",
                "name": "lambda",
                "provider_config_key": "aws",
                "expressions": {
                  "name": {
                    "references": ["var.lambda_at_edge", "var.function_name"]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create",
                    "var.create_function",
                    "var.create_layer",
                    "var.use_existing_cloudwatch_log_group"
                  ]
                }
              },
              {
                "address": "data.aws_iam_policy.tracing",
                "mode": "data",
                "type": "aws_iam_policy",
                "name": "tracing",
                "provider_config_key": "aws",
                "expressions": {
                  "arn": {
                    "references": [
                      "data.aws_partition.current.partition",
                      "data.aws_partition.current"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_role",
                    "var.attach_tracing_policy"
                  ]
                }
              },
              {
                "address": "data.aws_iam_policy.vpc",
                "mode": "data",
                "type": "aws_iam_policy",
                "name": "vpc",
                "provider_config_key": "aws",
                "expressions": {
                  "arn": {
                    "references": [
                      "data.aws_partition.current.partition",
                      "data.aws_partition.current"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_role",
                    "var.attach_network_policy"
                  ]
                }
              },
              {
                "address": "data.aws_iam_policy_document.additional_inline",
                "mode": "data",
                "type": "aws_iam_policy_document",
                "name": "additional_inline",
                "provider_config_key": "aws",
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_role",
                    "var.attach_policy_statements"
                  ]
                }
              },
              {
                "address": "data.aws_iam_policy_document.assume_role",
                "mode": "data",
                "type": "aws_iam_policy_document",
                "name": "assume_role",
                "provider_config_key": "aws",
                "expressions": {
                  "statement": [
                    {
                      "actions": { "constant_value": ["sts:AssumeRole"] },
                      "effect": { "constant_value": "Allow" },
                      "principals": [
                        {
                          "identifiers": {
                            "references": ["local.trusted_entities_services"]
                          },
                          "type": { "constant_value": "Service" }
                        }
                      ]
                    }
                  ]
                },
                "schema_version": 0,
                "count_expression": { "references": ["local.create_role"] }
              },
              {
                "address": "data.aws_iam_policy_document.async",
                "mode": "data",
                "type": "aws_iam_policy_document",
                "name": "async",
                "provider_config_key": "aws",
                "expressions": {
                  "statement": [
                    {
                      "actions": {
                        "constant_value": [
                          "sns:Publish",
                          "sqs:SendMessage",
                          "events:PutEvents",
                          "lambda:InvokeFunction"
                        ]
                      },
                      "effect": { "constant_value": "Allow" },
                      "resources": {
                        "references": [
                          "var.destination_on_failure",
                          "var.destination_on_success"
                        ]
                      }
                    }
                  ]
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_role",
                    "var.attach_async_event_policy"
                  ]
                }
              },
              {
                "address": "data.aws_iam_policy_document.dead_letter",
                "mode": "data",
                "type": "aws_iam_policy_document",
                "name": "dead_letter",
                "provider_config_key": "aws",
                "expressions": {
                  "statement": [
                    {
                      "actions": {
                        "constant_value": ["sns:Publish", "sqs:SendMessage"]
                      },
                      "effect": { "constant_value": "Allow" },
                      "resources": {
                        "references": ["var.dead_letter_target_arn"]
                      }
                    }
                  ]
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_role",
                    "var.attach_dead_letter_policy"
                  ]
                }
              },
              {
                "address": "data.aws_iam_policy_document.logs",
                "mode": "data",
                "type": "aws_iam_policy_document",
                "name": "logs",
                "provider_config_key": "aws",
                "expressions": {
                  "statement": [
                    {
                      "actions": {
                        "references": ["var.use_existing_cloudwatch_log_group"]
                      },
                      "effect": { "constant_value": "Allow" },
                      "resources": { "references": ["local.log_group_arn"] }
                    }
                  ]
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_role",
                    "var.attach_cloudwatch_logs_policy"
                  ]
                }
              },
              {
                "address": "data.aws_partition.current",
                "mode": "data",
                "type": "aws_partition",
                "name": "current",
                "provider_config_key": "aws",
                "schema_version": 0
              },
              {
                "address": "data.aws_region.current",
                "mode": "data",
                "type": "aws_region",
                "name": "current",
                "provider_config_key": "aws",
                "schema_version": 0
              },
              {
                "address": "data.external.archive_prepare",
                "mode": "data",
                "type": "external",
                "name": "archive_prepare",
                "provider_config_key": "module.lambda_function:external",
                "expressions": {
                  "program": { "references": ["local.python", "path.module"] },
                  "query": {
                    "references": [
                      "path.module",
                      "path.root",
                      "path.cwd",
                      "var.build_in_docker",
                      "var.docker_pip_cache",
                      "var.docker_build_root",
                      "var.docker_file",
                      "var.docker_image",
                      "var.docker_with_ssh_agent",
                      "var.docker_additional_options",
                      "var.docker_entrypoint",
                      "var.artifacts_dir",
                      "var.runtime",
                      "var.source_path",
                      "var.hash_extra",
                      "var.recreate_missing_package"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": ["var.create", "var.create_package"]
                }
              }
            ],
            "variables": {
              "allowed_triggers": {
                "default": {},
                "description": "Map of allowed triggers to create Lambda permissions"
              },
              "architectures": {
                "default": null,
                "description": "Instruction set architecture for your Lambda function. Valid values are [\"x86_64\"] and [\"arm64\"]."
              },
              "artifacts_dir": {
                "default": "builds",
                "description": "Directory name where artifacts should be stored"
              },
              "assume_role_policy_statements": {
                "default": {},
                "description": "Map of dynamic policy statements for assuming Lambda Function role (trust relationship)"
              },
              "attach_async_event_policy": {
                "default": false,
                "description": "Controls whether async event policy should be added to IAM role for Lambda Function"
              },
              "attach_cloudwatch_logs_policy": {
                "default": true,
                "description": "Controls whether CloudWatch Logs policy should be added to IAM role for Lambda Function"
              },
              "attach_dead_letter_policy": {
                "default": false,
                "description": "Controls whether SNS/SQS dead letter notification policy should be added to IAM role for Lambda Function"
              },
              "attach_network_policy": {
                "default": false,
                "description": "Controls whether VPC/network policy should be added to IAM role for Lambda Function"
              },
              "attach_policies": {
                "default": false,
                "description": "Controls whether list of policies should be added to IAM role for Lambda Function"
              },
              "attach_policy": {
                "default": false,
                "description": "Controls whether policy should be added to IAM role for Lambda Function"
              },
              "attach_policy_json": {
                "default": false,
                "description": "Controls whether policy_json should be added to IAM role for Lambda Function"
              },
              "attach_policy_jsons": {
                "default": false,
                "description": "Controls whether policy_jsons should be added to IAM role for Lambda Function"
              },
              "attach_policy_statements": {
                "default": false,
                "description": "Controls whether policy_statements should be added to IAM role for Lambda Function"
              },
              "attach_tracing_policy": {
                "default": false,
                "description": "Controls whether X-Ray tracing policy should be added to IAM role for Lambda Function"
              },
              "authorization_type": {
                "default": "NONE",
                "description": "The type of authentication that the Lambda Function URL uses. Set to 'AWS_IAM' to restrict access to authenticated IAM users only. Set to 'NONE' to bypass IAM authentication and create a public endpoint."
              },
              "build_in_docker": {
                "default": false,
                "description": "Whether to build dependencies in Docker"
              },
              "cloudwatch_logs_kms_key_id": {
                "default": null,
                "description": "The ARN of the KMS Key to use when encrypting log data."
              },
              "cloudwatch_logs_retention_in_days": {
                "default": null,
                "description": "Specifies the number of days you want to retain log events in the specified log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, and 3653."
              },
              "cloudwatch_logs_tags": {
                "default": {},
                "description": "A map of tags to assign to the resource."
              },
              "code_signing_config_arn": {
                "default": null,
                "description": "Amazon Resource Name (ARN) for a Code Signing Configuration"
              },
              "compatible_architectures": {
                "default": null,
                "description": "A list of Architectures Lambda layer is compatible with. Currently x86_64 and arm64 can be specified."
              },
              "compatible_runtimes": {
                "default": [],
                "description": "A list of Runtimes this layer is compatible with. Up to 5 runtimes can be specified."
              },
              "cors": {
                "default": {},
                "description": "CORS settings to be used by the Lambda Function URL"
              },
              "create": {
                "default": true,
                "description": "Controls whether resources should be created"
              },
              "create_async_event_config": {
                "default": false,
                "description": "Controls whether async event configuration for Lambda Function/Alias should be created"
              },
              "create_current_version_allowed_triggers": {
                "default": true,
                "description": "Whether to allow triggers on current version of Lambda Function (this will revoke permissions from previous version because Terraform manages only current resources)"
              },
              "create_current_version_async_event_config": {
                "default": true,
                "description": "Whether to allow async event configuration on current version of Lambda Function (this will revoke permissions from previous version because Terraform manages only current resources)"
              },
              "create_function": {
                "default": true,
                "description": "Controls whether Lambda Function resource should be created"
              },
              "create_lambda_function_url": {
                "default": false,
                "description": "Controls whether the Lambda Function URL resource should be created"
              },
              "create_layer": {
                "default": false,
                "description": "Controls whether Lambda Layer resource should be created"
              },
              "create_package": {
                "default": true,
                "description": "Controls whether Lambda package should be created"
              },
              "create_role": {
                "default": true,
                "description": "Controls whether IAM role for Lambda Function should be created"
              },
              "create_unqualified_alias_allowed_triggers": {
                "default": true,
                "description": "Whether to allow triggers on unqualified alias pointing to $LATEST version"
              },
              "create_unqualified_alias_async_event_config": {
                "default": true,
                "description": "Whether to allow async event configuration on unqualified alias pointing to $LATEST version"
              },
              "create_unqualified_alias_lambda_function_url": {
                "default": true,
                "description": "Whether to use unqualified alias pointing to $LATEST version in Lambda Function URL"
              },
              "dead_letter_target_arn": {
                "default": null,
                "description": "The ARN of an SNS topic or SQS queue to notify when an invocation fails."
              },
              "description": {
                "default": "",
                "description": "Description of your Lambda Function (or Layer)"
              },
              "destination_on_failure": {
                "default": null,
                "description": "Amazon Resource Name (ARN) of the destination resource for failed asynchronous invocations"
              },
              "destination_on_success": {
                "default": null,
                "description": "Amazon Resource Name (ARN) of the destination resource for successful asynchronous invocations"
              },
              "docker_additional_options": {
                "default": [],
                "description": "Additional options to pass to the docker run command (e.g. to set environment variables, volumes, etc.)"
              },
              "docker_build_root": {
                "default": "",
                "description": "Root dir where to build in Docker"
              },
              "docker_entrypoint": {
                "default": null,
                "description": "Path to the Docker entrypoint to use"
              },
              "docker_file": {
                "default": "",
                "description": "Path to a Dockerfile when building in Docker"
              },
              "docker_image": {
                "default": "",
                "description": "Docker image to use for the build"
              },
              "docker_pip_cache": {
                "default": null,
                "description": "Whether to mount a shared pip cache folder into docker environment or not"
              },
              "docker_with_ssh_agent": {
                "default": false,
                "description": "Whether to pass SSH_AUTH_SOCK into docker environment or not"
              },
              "environment_variables": {
                "default": {},
                "description": "A map that defines environment variables for the Lambda Function."
              },
              "ephemeral_storage_size": {
                "default": 512,
                "description": "Amount of ephemeral storage (/tmp) in MB your Lambda Function can use at runtime. Valid value between 512 MB to 10,240 MB (10 GB)."
              },
              "event_source_mapping": {
                "default": {},
                "description": "Map of event source mapping"
              },
              "file_system_arn": {
                "default": null,
                "description": "The Amazon Resource Name (ARN) of the Amazon EFS Access Point that provides access to the file system."
              },
              "file_system_local_mount_path": {
                "default": null,
                "description": "The path where the function can access the file system, starting with /mnt/."
              },
              "function_name": {
                "default": "",
                "description": "A unique name for your Lambda Function"
              },
              "handler": {
                "default": "",
                "description": "Lambda Function entrypoint in your code"
              },
              "hash_extra": {
                "default": "",
                "description": "The string to add into hashing function. Useful when building same source path for different functions."
              },
              "ignore_source_code_hash": {
                "default": false,
                "description": "Whether to ignore changes to the function's source code hash. Set to true if you manage infrastructure and code deployments separately."
              },
              "image_config_command": {
                "default": [],
                "description": "The CMD for the docker image"
              },
              "image_config_entry_point": {
                "default": [],
                "description": "The ENTRYPOINT for the docker image"
              },
              "image_config_working_directory": {
                "default": null,
                "description": "The working directory for the docker image"
              },
              "image_uri": {
                "default": null,
                "description": "The ECR image URI containing the function's deployment package."
              },
              "invoke_mode": {
                "default": null,
                "description": "Invoke mode of the Lambda Function URL. Valid values are BUFFERED (default) and RESPONSE_STREAM."
              },
              "kms_key_arn": {
                "default": null,
                "description": "The ARN of KMS key to use by your Lambda Function"
              },
              "lambda_at_edge": {
                "default": false,
                "description": "Set this to true if using Lambda@Edge, to enable publishing, limit the timeout, and allow edgelambda.amazonaws.com to invoke the function"
              },
              "lambda_at_edge_logs_all_regions": {
                "default": true,
                "description": "Whether to specify a wildcard in IAM policy used by Lambda@Edge to allow logging in all regions"
              },
              "lambda_role": {
                "default": "",
                "description": " IAM role ARN attached to the Lambda Function. This governs both who / what can invoke your Lambda Function, as well as what resources our Lambda Function has access to. See Lambda Permission Model for more details."
              },
              "layer_name": {
                "default": "",
                "description": "Name of Lambda Layer to create"
              },
              "layer_skip_destroy": {
                "default": false,
                "description": "Whether to retain the old version of a previously deployed Lambda Layer."
              },
              "layers": {
                "default": null,
                "description": "List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function."
              },
              "license_info": {
                "default": "",
                "description": "License info for your Lambda Layer. Eg, MIT or full url of a license."
              },
              "local_existing_package": {
                "default": null,
                "description": "The absolute path to an existing zip-file to use"
              },
              "maximum_event_age_in_seconds": {
                "default": null,
                "description": "Maximum age of a request that Lambda sends to a function for processing in seconds. Valid values between 60 and 21600."
              },
              "maximum_retry_attempts": {
                "default": null,
                "description": "Maximum number of times to retry when the function returns an error. Valid values between 0 and 2. Defaults to 2."
              },
              "memory_size": {
                "default": 128,
                "description": "Amount of memory in MB your Lambda Function can use at runtime. Valid value between 128 MB to 10,240 MB (10 GB), in 64 MB increments."
              },
              "number_of_policies": {
                "default": 0,
                "description": "Number of policies to attach to IAM role for Lambda Function"
              },
              "number_of_policy_jsons": {
                "default": 0,
                "description": "Number of policies JSON to attach to IAM role for Lambda Function"
              },
              "package_type": {
                "default": "Zip",
                "description": "The Lambda deployment package type. Valid options: Zip or Image"
              },
              "policies": {
                "default": [],
                "description": "List of policy statements ARN to attach to Lambda Function role"
              },
              "policy": {
                "default": null,
                "description": "An additional policy document ARN to attach to the Lambda Function role"
              },
              "policy_json": {
                "default": null,
                "description": "An additional policy document as JSON to attach to the Lambda Function role"
              },
              "policy_jsons": {
                "default": [],
                "description": "List of additional policy documents as JSON to attach to Lambda Function role"
              },
              "policy_name": {
                "default": null,
                "description": "IAM policy name. It override the default value, which is the same as role_name"
              },
              "policy_path": {
                "default": null,
                "description": "Path of policies to that should be added to IAM role for Lambda Function"
              },
              "policy_statements": {
                "default": {},
                "description": "Map of dynamic policy statements to attach to Lambda Function role"
              },
              "provisioned_concurrent_executions": {
                "default": -1,
                "description": "Amount of capacity to allocate. Set to 1 or greater to enable, or set to 0 to disable provisioned concurrency."
              },
              "publish": {
                "default": false,
                "description": "Whether to publish creation/change as new Lambda Function Version."
              },
              "putin_khuylo": {
                "default": true,
                "description": "Do you agree that Putin doesn't respect Ukrainian sovereignty and territorial integrity? More info: https://en.wikipedia.org/wiki/Putin_khuylo!"
              },
              "recreate_missing_package": {
                "default": true,
                "description": "Whether to recreate missing Lambda package if it is missing locally or not"
              },
              "replace_security_groups_on_destroy": {
                "default": null,
                "description": "(Optional) When true, all security groups defined in vpc_security_group_ids will be replaced with the default security group after the function is destroyed. Set the replacement_security_group_ids variable to use a custom list of security groups for replacement instead."
              },
              "replacement_security_group_ids": {
                "default": null,
                "description": "(Optional) List of security group IDs to assign to orphaned Lambda function network interfaces upon destruction. replace_security_groups_on_destroy must be set to true to use this attribute."
              },
              "reserved_concurrent_executions": {
                "default": -1,
                "description": "The amount of reserved concurrent executions for this Lambda Function. A value of 0 disables Lambda Function from being triggered and -1 removes any concurrency limitations. Defaults to Unreserved Concurrency Limits -1."
              },
              "role_description": {
                "default": null,
                "description": "Description of IAM role to use for Lambda Function"
              },
              "role_force_detach_policies": {
                "default": true,
                "description": "Specifies to force detaching any policies the IAM role has before destroying it."
              },
              "role_maximum_session_duration": {
                "default": 3600,
                "description": "Maximum session duration, in seconds, for the IAM role"
              },
              "role_name": {
                "default": null,
                "description": "Name of IAM role to use for Lambda Function"
              },
              "role_path": {
                "default": null,
                "description": "Path of IAM role to use for Lambda Function"
              },
              "role_permissions_boundary": {
                "default": null,
                "description": "The ARN of the policy that is used to set the permissions boundary for the IAM role used by Lambda Function"
              },
              "role_tags": {
                "default": {},
                "description": "A map of tags to assign to IAM role"
              },
              "runtime": {
                "default": "",
                "description": "Lambda Function runtime"
              },
              "s3_acl": {
                "default": "private",
                "description": "The canned ACL to apply. Valid values are private, public-read, public-read-write, aws-exec-read, authenticated-read, bucket-owner-read, and bucket-owner-full-control. Defaults to private."
              },
              "s3_bucket": {
                "default": null,
                "description": "S3 bucket to store artifacts"
              },
              "s3_existing_package": {
                "default": null,
                "description": "The S3 bucket object with keys bucket, key, version pointing to an existing zip-file to use"
              },
              "s3_object_storage_class": {
                "default": "ONEZONE_IA",
                "description": "Specifies the desired Storage Class for the artifact uploaded to S3. Can be either STANDARD, REDUCED_REDUNDANCY, ONEZONE_IA, INTELLIGENT_TIERING, or STANDARD_IA."
              },
              "s3_object_tags": {
                "default": {},
                "description": "A map of tags to assign to S3 bucket object."
              },
              "s3_object_tags_only": {
                "default": false,
                "description": "Set to true to not merge tags with s3_object_tags. Useful to avoid breaching S3 Object 10 tag limit."
              },
              "s3_prefix": {
                "default": null,
                "description": "Directory name where artifacts should be stored in the S3 bucket. If unset, the path from `artifacts_dir` is used"
              },
              "s3_server_side_encryption": {
                "default": null,
                "description": "Specifies server-side encryption of the object in S3. Valid values are \"AES256\" and \"aws:kms\"."
              },
              "snap_start": {
                "default": false,
                "description": "(Optional) Snap start settings for low-latency startups"
              },
              "source_path": {
                "default": null,
                "description": "The absolute path to a local file or directory containing your Lambda source code"
              },
              "store_on_s3": {
                "default": false,
                "description": "Whether to store produced artifacts on S3 or locally."
              },
              "tags": {
                "default": {},
                "description": "A map of tags to assign to resources."
              },
              "timeout": {
                "default": 3,
                "description": "The amount of time your Lambda Function has to run in seconds."
              },
              "tracing_mode": {
                "default": null,
                "description": "Tracing mode of the Lambda Function. Valid value can be either PassThrough or Active."
              },
              "trusted_entities": {
                "default": [],
                "description": "List of additional trusted entities for assuming Lambda Function role (trust relationship)"
              },
              "use_existing_cloudwatch_log_group": {
                "default": false,
                "description": "Whether to use an existing CloudWatch log group or create new"
              },
              "vpc_security_group_ids": {
                "default": null,
                "description": "List of security group ids when Lambda Function should run in the VPC."
              },
              "vpc_subnet_ids": {
                "default": null,
                "description": "List of subnet ids when Lambda Function should run in the VPC. Usually private or intra subnets."
              }
            }
          },
          "version_constraint": "~\u003e 4.0",
          "depends_on": ["module.s3_bucket"]
        },
        "s3_bucket": {
          "source": "terraform-aws-modules/s3-bucket/aws",
          "expressions": {
            "acl": { "constant_value": "private" },
            "bucket": { "constant_value": "example-bucket" },
            "server_side_encryption_configuration": {
              "constant_value": {
                "rule": {
                  "apply_server_side_encryption_by_default": {
                    "sse_algorithm": "AES256"
                  }
                }
              }
            },
            "tags": {
              "constant_value": {
                "Environment": "Development",
                "Owner": "User"
              }
            },
            "versioning": { "constant_value": { "enabled": true } }
          },
          "module": {
            "outputs": {
              "s3_bucket_arn": {
                "expression": {
                  "references": [
                    "aws_s3_bucket.this[0].arn",
                    "aws_s3_bucket.this[0]",
                    "aws_s3_bucket.this"
                  ]
                },
                "description": "The ARN of the bucket. Will be of format arn:aws:s3:::bucketname."
              },
              "s3_bucket_bucket_domain_name": {
                "expression": {
                  "references": [
                    "aws_s3_bucket.this[0].bucket_domain_name",
                    "aws_s3_bucket.this[0]",
                    "aws_s3_bucket.this"
                  ]
                },
                "description": "The bucket domain name. Will be of format bucketname.s3.amazonaws.com."
              },
              "s3_bucket_bucket_regional_domain_name": {
                "expression": {
                  "references": [
                    "aws_s3_bucket.this[0].bucket_regional_domain_name",
                    "aws_s3_bucket.this[0]",
                    "aws_s3_bucket.this"
                  ]
                },
                "description": "The bucket region-specific domain name. The bucket domain name including the region name, please refer here for format. Note: The AWS CloudFront allows specifying S3 region-specific endpoint when creating S3 origin, it will prevent redirect issues from CloudFront to S3 Origin URL."
              },
              "s3_bucket_hosted_zone_id": {
                "expression": {
                  "references": [
                    "aws_s3_bucket.this[0].hosted_zone_id",
                    "aws_s3_bucket.this[0]",
                    "aws_s3_bucket.this"
                  ]
                },
                "description": "The Route 53 Hosted Zone ID for this bucket's region."
              },
              "s3_bucket_id": {
                "expression": {
                  "references": [
                    "aws_s3_bucket_policy.this[0].id",
                    "aws_s3_bucket_policy.this[0]",
                    "aws_s3_bucket_policy.this",
                    "aws_s3_bucket.this[0].id",
                    "aws_s3_bucket.this[0]",
                    "aws_s3_bucket.this"
                  ]
                },
                "description": "The name of the bucket."
              },
              "s3_bucket_lifecycle_configuration_rules": {
                "expression": {
                  "references": [
                    "aws_s3_bucket_lifecycle_configuration.this[0].rule",
                    "aws_s3_bucket_lifecycle_configuration.this[0]",
                    "aws_s3_bucket_lifecycle_configuration.this"
                  ]
                },
                "description": "The lifecycle rules of the bucket, if the bucket is configured with lifecycle rules. If not, this will be an empty string."
              },
              "s3_bucket_policy": {
                "expression": {
                  "references": [
                    "aws_s3_bucket_policy.this[0].policy",
                    "aws_s3_bucket_policy.this[0]",
                    "aws_s3_bucket_policy.this"
                  ]
                },
                "description": "The policy of the bucket, if the bucket is configured with a policy. If not, this will be an empty string."
              },
              "s3_bucket_region": {
                "expression": {
                  "references": [
                    "aws_s3_bucket.this[0].region",
                    "aws_s3_bucket.this[0]",
                    "aws_s3_bucket.this"
                  ]
                },
                "description": "The AWS region this bucket resides in."
              },
              "s3_bucket_website_domain": {
                "expression": {
                  "references": [
                    "aws_s3_bucket_website_configuration.this[0].website_domain",
                    "aws_s3_bucket_website_configuration.this[0]",
                    "aws_s3_bucket_website_configuration.this"
                  ]
                },
                "description": "The domain of the website endpoint, if the bucket is configured with a website. If not, this will be an empty string. This is used to create Route 53 alias records."
              },
              "s3_bucket_website_endpoint": {
                "expression": {
                  "references": [
                    "aws_s3_bucket_website_configuration.this[0].website_endpoint",
                    "aws_s3_bucket_website_configuration.this[0]",
                    "aws_s3_bucket_website_configuration.this"
                  ]
                },
                "description": "The website endpoint, if the bucket is configured with a website. If not, this will be an empty string."
              }
            },
            "resources": [
              {
                "address": "aws_s3_bucket.this",
                "mode": "managed",
                "type": "aws_s3_bucket",
                "name": "this",
                "provider_config_key": "aws",
                "expressions": {
                  "bucket": { "references": ["var.bucket"] },
                  "bucket_prefix": { "references": ["var.bucket_prefix"] },
                  "force_destroy": { "references": ["var.force_destroy"] },
                  "object_lock_enabled": {
                    "references": ["var.object_lock_enabled"]
                  },
                  "tags": { "references": ["var.tags"] }
                },
                "schema_version": 0,
                "count_expression": { "references": ["local.create_bucket"] }
              },
              {
                "address": "aws_s3_bucket_accelerate_configuration.this",
                "mode": "managed",
                "type": "aws_s3_bucket_accelerate_configuration",
                "name": "this",
                "provider_config_key": "aws",
                "expressions": {
                  "bucket": {
                    "references": [
                      "aws_s3_bucket.this[0].id",
                      "aws_s3_bucket.this[0]",
                      "aws_s3_bucket.this"
                    ]
                  },
                  "expected_bucket_owner": {
                    "references": ["var.expected_bucket_owner"]
                  },
                  "status": { "references": ["var.acceleration_status"] }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_bucket",
                    "var.acceleration_status"
                  ]
                }
              },
              {
                "address": "aws_s3_bucket_acl.this",
                "mode": "managed",
                "type": "aws_s3_bucket_acl",
                "name": "this",
                "provider_config_key": "aws",
                "expressions": {
                  "acl": { "references": ["var.acl", "var.acl"] },
                  "bucket": {
                    "references": [
                      "aws_s3_bucket.this[0].id",
                      "aws_s3_bucket.this[0]",
                      "aws_s3_bucket.this"
                    ]
                  },
                  "expected_bucket_owner": {
                    "references": ["var.expected_bucket_owner"]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_bucket",
                    "local.create_bucket_acl"
                  ]
                },
                "depends_on": ["aws_s3_bucket_ownership_controls.this"]
              },
              {
                "address": "aws_s3_bucket_analytics_configuration.this",
                "mode": "managed",
                "type": "aws_s3_bucket_analytics_configuration",
                "name": "this",
                "provider_config_key": "aws",
                "expressions": {
                  "bucket": {
                    "references": [
                      "aws_s3_bucket.this[0].id",
                      "aws_s3_bucket.this[0]",
                      "aws_s3_bucket.this"
                    ]
                  },
                  "name": { "references": ["each.key"] }
                },
                "schema_version": 0,
                "for_each_expression": {
                  "references": [
                    "var.analytics_configuration",
                    "local.create_bucket"
                  ]
                }
              },
              {
                "address": "aws_s3_bucket_cors_configuration.this",
                "mode": "managed",
                "type": "aws_s3_bucket_cors_configuration",
                "name": "this",
                "provider_config_key": "aws",
                "expressions": {
                  "bucket": {
                    "references": [
                      "aws_s3_bucket.this[0].id",
                      "aws_s3_bucket.this[0]",
                      "aws_s3_bucket.this"
                    ]
                  },
                  "expected_bucket_owner": {
                    "references": ["var.expected_bucket_owner"]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": ["local.create_bucket", "local.cors_rules"]
                }
              },
              {
                "address": "aws_s3_bucket_intelligent_tiering_configuration.this",
                "mode": "managed",
                "type": "aws_s3_bucket_intelligent_tiering_configuration",
                "name": "this",
                "provider_config_key": "aws",
                "expressions": {
                  "bucket": {
                    "references": [
                      "aws_s3_bucket.this[0].id",
                      "aws_s3_bucket.this[0]",
                      "aws_s3_bucket.this"
                    ]
                  },
                  "name": { "references": ["each.key"] },
                  "status": {
                    "references": [
                      "each.value.status",
                      "each.value",
                      "each.value.status",
                      "each.value"
                    ]
                  }
                },
                "schema_version": 0,
                "for_each_expression": {
                  "references": [
                    "local.intelligent_tiering",
                    "local.create_bucket"
                  ]
                }
              },
              {
                "address": "aws_s3_bucket_inventory.this",
                "mode": "managed",
                "type": "aws_s3_bucket_inventory",
                "name": "this",
                "provider_config_key": "aws",
                "expressions": {
                  "bucket": {
                    "references": [
                      "each.value.bucket",
                      "each.value",
                      "aws_s3_bucket.this[0].id",
                      "aws_s3_bucket.this[0]",
                      "aws_s3_bucket.this"
                    ]
                  },
                  "destination": [
                    {
                      "bucket": [
                        {
                          "account_id": {
                            "references": [
                              "each.value.destination.account_id",
                              "each.value.destination",
                              "each.value"
                            ]
                          },
                          "bucket_arn": {
                            "references": [
                              "each.value.destination.bucket_arn",
                              "each.value.destination",
                              "each.value",
                              "aws_s3_bucket.this[0].arn",
                              "aws_s3_bucket.this[0]",
                              "aws_s3_bucket.this"
                            ]
                          },
                          "format": {
                            "references": [
                              "each.value.destination.format",
                              "each.value.destination",
                              "each.value"
                            ]
                          },
                          "prefix": {
                            "references": [
                              "each.value.destination.prefix",
                              "each.value.destination",
                              "each.value"
                            ]
                          }
                        }
                      ]
                    }
                  ],
                  "enabled": {
                    "references": ["each.value.enabled", "each.value"]
                  },
                  "included_object_versions": {
                    "references": [
                      "each.value.included_object_versions",
                      "each.value"
                    ]
                  },
                  "name": { "references": ["each.key"] },
                  "optional_fields": {
                    "references": ["each.value.optional_fields", "each.value"]
                  },
                  "schedule": [
                    {
                      "frequency": {
                        "references": ["each.value.frequency", "each.value"]
                      }
                    }
                  ]
                },
                "schema_version": 0,
                "for_each_expression": {
                  "references": [
                    "var.inventory_configuration",
                    "local.create_bucket"
                  ]
                }
              },
              {
                "address": "aws_s3_bucket_lifecycle_configuration.this",
                "mode": "managed",
                "type": "aws_s3_bucket_lifecycle_configuration",
                "name": "this",
                "provider_config_key": "aws",
                "expressions": {
                  "bucket": {
                    "references": [
                      "aws_s3_bucket.this[0].id",
                      "aws_s3_bucket.this[0]",
                      "aws_s3_bucket.this"
                    ]
                  },
                  "expected_bucket_owner": {
                    "references": ["var.expected_bucket_owner"]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": ["local.create_bucket", "local.lifecycle_rules"]
                },
                "depends_on": ["aws_s3_bucket_versioning.this"]
              },
              {
                "address": "aws_s3_bucket_logging.this",
                "mode": "managed",
                "type": "aws_s3_bucket_logging",
                "name": "this",
                "provider_config_key": "aws",
                "expressions": {
                  "bucket": {
                    "references": [
                      "aws_s3_bucket.this[0].id",
                      "aws_s3_bucket.this[0]",
                      "aws_s3_bucket.this"
                    ]
                  },
                  "target_bucket": {
                    "references": [
                      "var.logging[\"target_bucket\"]",
                      "var.logging"
                    ]
                  },
                  "target_prefix": {
                    "references": [
                      "var.logging[\"target_prefix\"]",
                      "var.logging"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": ["local.create_bucket", "var.logging"]
                }
              },
              {
                "address": "aws_s3_bucket_metric.this",
                "mode": "managed",
                "type": "aws_s3_bucket_metric",
                "name": "this",
                "provider_config_key": "aws",
                "expressions": {
                  "bucket": {
                    "references": [
                      "aws_s3_bucket.this[0].id",
                      "aws_s3_bucket.this[0]",
                      "aws_s3_bucket.this"
                    ]
                  },
                  "name": { "references": ["each.value.name", "each.value"] }
                },
                "schema_version": 0,
                "for_each_expression": {
                  "references": [
                    "local.metric_configuration",
                    "local.create_bucket"
                  ]
                }
              },
              {
                "address": "aws_s3_bucket_object_lock_configuration.this",
                "mode": "managed",
                "type": "aws_s3_bucket_object_lock_configuration",
                "name": "this",
                "provider_config_key": "aws",
                "expressions": {
                  "bucket": {
                    "references": [
                      "aws_s3_bucket.this[0].id",
                      "aws_s3_bucket.this[0]",
                      "aws_s3_bucket.this"
                    ]
                  },
                  "expected_bucket_owner": {
                    "references": ["var.expected_bucket_owner"]
                  },
                  "rule": [
                    {
                      "default_retention": [
                        {
                          "days": {
                            "references": [
                              "var.object_lock_configuration.rule.default_retention.days",
                              "var.object_lock_configuration.rule.default_retention",
                              "var.object_lock_configuration.rule",
                              "var.object_lock_configuration"
                            ]
                          },
                          "mode": {
                            "references": [
                              "var.object_lock_configuration.rule.default_retention.mode",
                              "var.object_lock_configuration.rule.default_retention",
                              "var.object_lock_configuration.rule",
                              "var.object_lock_configuration"
                            ]
                          },
                          "years": {
                            "references": [
                              "var.object_lock_configuration.rule.default_retention.years",
                              "var.object_lock_configuration.rule.default_retention",
                              "var.object_lock_configuration.rule",
                              "var.object_lock_configuration"
                            ]
                          }
                        }
                      ]
                    }
                  ],
                  "token": {
                    "references": [
                      "var.object_lock_configuration.token",
                      "var.object_lock_configuration"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_bucket",
                    "var.object_lock_enabled",
                    "var.object_lock_configuration.rule.default_retention",
                    "var.object_lock_configuration.rule",
                    "var.object_lock_configuration"
                  ]
                }
              },
              {
                "address": "aws_s3_bucket_ownership_controls.this",
                "mode": "managed",
                "type": "aws_s3_bucket_ownership_controls",
                "name": "this",
                "provider_config_key": "aws",
                "expressions": {
                  "bucket": {
                    "references": [
                      "local.attach_policy",
                      "aws_s3_bucket_policy.this[0].id",
                      "aws_s3_bucket_policy.this[0]",
                      "aws_s3_bucket_policy.this",
                      "aws_s3_bucket.this[0].id",
                      "aws_s3_bucket.this[0]",
                      "aws_s3_bucket.this"
                    ]
                  },
                  "rule": [
                    {
                      "object_ownership": {
                        "references": ["var.object_ownership"]
                      }
                    }
                  ]
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_bucket",
                    "var.control_object_ownership"
                  ]
                },
                "depends_on": [
                  "aws_s3_bucket_policy.this",
                  "aws_s3_bucket_public_access_block.this",
                  "aws_s3_bucket.this"
                ]
              },
              {
                "address": "aws_s3_bucket_policy.this",
                "mode": "managed",
                "type": "aws_s3_bucket_policy",
                "name": "this",
                "provider_config_key": "aws",
                "expressions": {
                  "bucket": {
                    "references": [
                      "aws_s3_bucket.this[0].id",
                      "aws_s3_bucket.this[0]",
                      "aws_s3_bucket.this"
                    ]
                  },
                  "policy": {
                    "references": [
                      "data.aws_iam_policy_document.combined[0].json",
                      "data.aws_iam_policy_document.combined[0]",
                      "data.aws_iam_policy_document.combined"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": ["local.create_bucket", "local.attach_policy"]
                },
                "depends_on": ["aws_s3_bucket_public_access_block.this"]
              },
              {
                "address": "aws_s3_bucket_public_access_block.this",
                "mode": "managed",
                "type": "aws_s3_bucket_public_access_block",
                "name": "this",
                "provider_config_key": "aws",
                "expressions": {
                  "block_public_acls": {
                    "references": ["var.block_public_acls"]
                  },
                  "block_public_policy": {
                    "references": ["var.block_public_policy"]
                  },
                  "bucket": {
                    "references": [
                      "aws_s3_bucket.this[0].id",
                      "aws_s3_bucket.this[0]",
                      "aws_s3_bucket.this"
                    ]
                  },
                  "ignore_public_acls": {
                    "references": ["var.ignore_public_acls"]
                  },
                  "restrict_public_buckets": {
                    "references": ["var.restrict_public_buckets"]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_bucket",
                    "var.attach_public_policy"
                  ]
                }
              },
              {
                "address": "aws_s3_bucket_replication_configuration.this",
                "mode": "managed",
                "type": "aws_s3_bucket_replication_configuration",
                "name": "this",
                "provider_config_key": "aws",
                "expressions": {
                  "bucket": {
                    "references": [
                      "aws_s3_bucket.this[0].id",
                      "aws_s3_bucket.this[0]",
                      "aws_s3_bucket.this"
                    ]
                  },
                  "role": {
                    "references": [
                      "var.replication_configuration[\"role\"]",
                      "var.replication_configuration"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_bucket",
                    "var.replication_configuration"
                  ]
                },
                "depends_on": ["aws_s3_bucket_versioning.this"]
              },
              {
                "address": "aws_s3_bucket_request_payment_configuration.this",
                "mode": "managed",
                "type": "aws_s3_bucket_request_payment_configuration",
                "name": "this",
                "provider_config_key": "aws",
                "expressions": {
                  "bucket": {
                    "references": [
                      "aws_s3_bucket.this[0].id",
                      "aws_s3_bucket.this[0]",
                      "aws_s3_bucket.this"
                    ]
                  },
                  "expected_bucket_owner": {
                    "references": ["var.expected_bucket_owner"]
                  },
                  "payer": { "references": ["var.request_payer"] }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": ["local.create_bucket", "var.request_payer"]
                }
              },
              {
                "address": "aws_s3_bucket_server_side_encryption_configuration.this",
                "mode": "managed",
                "type": "aws_s3_bucket_server_side_encryption_configuration",
                "name": "this",
                "provider_config_key": "aws",
                "expressions": {
                  "bucket": {
                    "references": [
                      "aws_s3_bucket.this[0].id",
                      "aws_s3_bucket.this[0]",
                      "aws_s3_bucket.this"
                    ]
                  },
                  "expected_bucket_owner": {
                    "references": ["var.expected_bucket_owner"]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_bucket",
                    "var.server_side_encryption_configuration"
                  ]
                }
              },
              {
                "address": "aws_s3_bucket_versioning.this",
                "mode": "managed",
                "type": "aws_s3_bucket_versioning",
                "name": "this",
                "provider_config_key": "aws",
                "expressions": {
                  "bucket": {
                    "references": [
                      "aws_s3_bucket.this[0].id",
                      "aws_s3_bucket.this[0]",
                      "aws_s3_bucket.this"
                    ]
                  },
                  "expected_bucket_owner": {
                    "references": ["var.expected_bucket_owner"]
                  },
                  "mfa": {
                    "references": ["var.versioning[\"mfa\"]", "var.versioning"]
                  },
                  "versioning_configuration": [
                    {
                      "mfa_delete": {
                        "references": [
                          "var.versioning[\"mfa_delete\"]",
                          "var.versioning",
                          "var.versioning[\"mfa_delete\"]",
                          "var.versioning"
                        ]
                      },
                      "status": {
                        "references": [
                          "var.versioning[\"enabled\"]",
                          "var.versioning",
                          "var.versioning[\"status\"]",
                          "var.versioning",
                          "var.versioning[\"status\"]",
                          "var.versioning"
                        ]
                      }
                    }
                  ]
                },
                "schema_version": 0,
                "count_expression": {
                  "references": ["local.create_bucket", "var.versioning"]
                }
              },
              {
                "address": "aws_s3_bucket_website_configuration.this",
                "mode": "managed",
                "type": "aws_s3_bucket_website_configuration",
                "name": "this",
                "provider_config_key": "aws",
                "expressions": {
                  "bucket": {
                    "references": [
                      "aws_s3_bucket.this[0].id",
                      "aws_s3_bucket.this[0]",
                      "aws_s3_bucket.this"
                    ]
                  },
                  "expected_bucket_owner": {
                    "references": ["var.expected_bucket_owner"]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": ["local.create_bucket", "var.website"]
                }
              },
              {
                "address": "data.aws_caller_identity.current",
                "mode": "data",
                "type": "aws_caller_identity",
                "name": "current",
                "provider_config_key": "aws",
                "schema_version": 0
              },
              {
                "address": "data.aws_canonical_user_id.this",
                "mode": "data",
                "type": "aws_canonical_user_id",
                "name": "this",
                "provider_config_key": "aws",
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_bucket",
                    "local.create_bucket_acl",
                    "var.owner[\"id\"]",
                    "var.owner"
                  ]
                }
              },
              {
                "address": "data.aws_iam_policy_document.access_log_delivery",
                "mode": "data",
                "type": "aws_iam_policy_document",
                "name": "access_log_delivery",
                "provider_config_key": "aws",
                "expressions": {
                  "statement": [
                    {
                      "actions": { "constant_value": ["s3:PutObject"] },
                      "effect": { "constant_value": "Allow" },
                      "principals": [
                        {
                          "identifiers": {
                            "constant_value": ["logging.s3.amazonaws.com"]
                          },
                          "type": { "constant_value": "Service" }
                        }
                      ],
                      "resources": {
                        "references": [
                          "aws_s3_bucket.this[0].arn",
                          "aws_s3_bucket.this[0]",
                          "aws_s3_bucket.this"
                        ]
                      },
                      "sid": { "constant_value": "AWSAccessLogDeliveryWrite" }
                    },
                    {
                      "actions": { "constant_value": ["s3:GetBucketAcl"] },
                      "effect": { "constant_value": "Allow" },
                      "principals": [
                        {
                          "identifiers": {
                            "constant_value": ["logging.s3.amazonaws.com"]
                          },
                          "type": { "constant_value": "Service" }
                        }
                      ],
                      "resources": {
                        "references": [
                          "aws_s3_bucket.this[0].arn",
                          "aws_s3_bucket.this[0]",
                          "aws_s3_bucket.this"
                        ]
                      },
                      "sid": {
                        "constant_value": "AWSAccessLogDeliveryAclCheck"
                      }
                    }
                  ]
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_bucket",
                    "var.attach_access_log_delivery_policy"
                  ]
                }
              },
              {
                "address": "data.aws_iam_policy_document.combined",
                "mode": "data",
                "type": "aws_iam_policy_document",
                "name": "combined",
                "provider_config_key": "aws",
                "expressions": {
                  "source_policy_documents": {
                    "references": [
                      "var.attach_elb_log_delivery_policy",
                      "data.aws_iam_policy_document.elb_log_delivery[0].json",
                      "data.aws_iam_policy_document.elb_log_delivery[0]",
                      "data.aws_iam_policy_document.elb_log_delivery",
                      "var.attach_lb_log_delivery_policy",
                      "data.aws_iam_policy_document.lb_log_delivery[0].json",
                      "data.aws_iam_policy_document.lb_log_delivery[0]",
                      "data.aws_iam_policy_document.lb_log_delivery",
                      "var.attach_access_log_delivery_policy",
                      "data.aws_iam_policy_document.access_log_delivery[0].json",
                      "data.aws_iam_policy_document.access_log_delivery[0]",
                      "data.aws_iam_policy_document.access_log_delivery",
                      "var.attach_require_latest_tls_policy",
                      "data.aws_iam_policy_document.require_latest_tls[0].json",
                      "data.aws_iam_policy_document.require_latest_tls[0]",
                      "data.aws_iam_policy_document.require_latest_tls",
                      "var.attach_deny_insecure_transport_policy",
                      "data.aws_iam_policy_document.deny_insecure_transport[0].json",
                      "data.aws_iam_policy_document.deny_insecure_transport[0]",
                      "data.aws_iam_policy_document.deny_insecure_transport",
                      "var.attach_deny_unencrypted_object_uploads",
                      "data.aws_iam_policy_document.deny_unencrypted_object_uploads[0].json",
                      "data.aws_iam_policy_document.deny_unencrypted_object_uploads[0]",
                      "data.aws_iam_policy_document.deny_unencrypted_object_uploads",
                      "var.attach_deny_incorrect_kms_key_sse",
                      "data.aws_iam_policy_document.deny_incorrect_kms_key_sse[0].json",
                      "data.aws_iam_policy_document.deny_incorrect_kms_key_sse[0]",
                      "data.aws_iam_policy_document.deny_incorrect_kms_key_sse",
                      "var.attach_deny_incorrect_encryption_headers",
                      "data.aws_iam_policy_document.deny_incorrect_encryption_headers[0].json",
                      "data.aws_iam_policy_document.deny_incorrect_encryption_headers[0]",
                      "data.aws_iam_policy_document.deny_incorrect_encryption_headers",
                      "var.attach_inventory_destination_policy",
                      "var.attach_analytics_destination_policy",
                      "data.aws_iam_policy_document.inventory_and_analytics_destination_policy[0].json",
                      "data.aws_iam_policy_document.inventory_and_analytics_destination_policy[0]",
                      "data.aws_iam_policy_document.inventory_and_analytics_destination_policy",
                      "var.attach_policy",
                      "var.policy"
                    ]
                  }
                },
                "schema_version": 0,
                "count_expression": {
                  "references": ["local.create_bucket", "local.attach_policy"]
                }
              },
              {
                "address": "data.aws_iam_policy_document.deny_incorrect_encryption_headers",
                "mode": "data",
                "type": "aws_iam_policy_document",
                "name": "deny_incorrect_encryption_headers",
                "provider_config_key": "aws",
                "expressions": {
                  "statement": [
                    {
                      "actions": { "constant_value": ["s3:PutObject"] },
                      "condition": [
                        {
                          "test": { "constant_value": "StringNotEquals" },
                          "values": {
                            "references": [
                              "var.server_side_encryption_configuration.rule.apply_server_side_encryption_by_default.sse_algorithm",
                              "var.server_side_encryption_configuration.rule.apply_server_side_encryption_by_default",
                              "var.server_side_encryption_configuration.rule",
                              "var.server_side_encryption_configuration"
                            ]
                          },
                          "variable": {
                            "constant_value": "s3:x-amz-server-side-encryption"
                          }
                        }
                      ],
                      "effect": { "constant_value": "Deny" },
                      "principals": [
                        {
                          "identifiers": { "constant_value": ["*"] },
                          "type": { "constant_value": "*" }
                        }
                      ],
                      "resources": {
                        "references": [
                          "aws_s3_bucket.this[0].arn",
                          "aws_s3_bucket.this[0]",
                          "aws_s3_bucket.this"
                        ]
                      },
                      "sid": {
                        "constant_value": "denyIncorrectEncryptionHeaders"
                      }
                    }
                  ]
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_bucket",
                    "var.attach_deny_incorrect_encryption_headers"
                  ]
                }
              },
              {
                "address": "data.aws_iam_policy_document.deny_incorrect_kms_key_sse",
                "mode": "data",
                "type": "aws_iam_policy_document",
                "name": "deny_incorrect_kms_key_sse",
                "provider_config_key": "aws",
                "expressions": {
                  "statement": [
                    {
                      "actions": { "constant_value": ["s3:PutObject"] },
                      "condition": [
                        {
                          "test": { "constant_value": "StringNotEquals" },
                          "values": {
                            "references": ["var.allowed_kms_key_arn"]
                          },
                          "variable": {
                            "constant_value": "s3:x-amz-server-side-encryption-aws-kms-key-id"
                          }
                        }
                      ],
                      "effect": { "constant_value": "Deny" },
                      "principals": [
                        {
                          "identifiers": { "constant_value": ["*"] },
                          "type": { "constant_value": "*" }
                        }
                      ],
                      "resources": {
                        "references": [
                          "aws_s3_bucket.this[0].arn",
                          "aws_s3_bucket.this[0]",
                          "aws_s3_bucket.this"
                        ]
                      },
                      "sid": { "constant_value": "denyIncorrectKmsKeySse" }
                    }
                  ]
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_bucket",
                    "var.attach_deny_incorrect_kms_key_sse"
                  ]
                }
              },
              {
                "address": "data.aws_iam_policy_document.deny_insecure_transport",
                "mode": "data",
                "type": "aws_iam_policy_document",
                "name": "deny_insecure_transport",
                "provider_config_key": "aws",
                "expressions": {
                  "statement": [
                    {
                      "actions": { "constant_value": ["s3:*"] },
                      "condition": [
                        {
                          "test": { "constant_value": "Bool" },
                          "values": { "constant_value": ["false"] },
                          "variable": {
                            "constant_value": "aws:SecureTransport"
                          }
                        }
                      ],
                      "effect": { "constant_value": "Deny" },
                      "principals": [
                        {
                          "identifiers": { "constant_value": ["*"] },
                          "type": { "constant_value": "*" }
                        }
                      ],
                      "resources": {
                        "references": [
                          "aws_s3_bucket.this[0].arn",
                          "aws_s3_bucket.this[0]",
                          "aws_s3_bucket.this",
                          "aws_s3_bucket.this[0].arn",
                          "aws_s3_bucket.this[0]",
                          "aws_s3_bucket.this"
                        ]
                      },
                      "sid": { "constant_value": "denyInsecureTransport" }
                    }
                  ]
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_bucket",
                    "var.attach_deny_insecure_transport_policy"
                  ]
                }
              },
              {
                "address": "data.aws_iam_policy_document.deny_unencrypted_object_uploads",
                "mode": "data",
                "type": "aws_iam_policy_document",
                "name": "deny_unencrypted_object_uploads",
                "provider_config_key": "aws",
                "expressions": {
                  "statement": [
                    {
                      "actions": { "constant_value": ["s3:PutObject"] },
                      "condition": [
                        {
                          "test": { "constant_value": "Null" },
                          "values": { "constant_value": [true] },
                          "variable": {
                            "constant_value": "s3:x-amz-server-side-encryption"
                          }
                        }
                      ],
                      "effect": { "constant_value": "Deny" },
                      "principals": [
                        {
                          "identifiers": { "constant_value": ["*"] },
                          "type": { "constant_value": "*" }
                        }
                      ],
                      "resources": {
                        "references": [
                          "aws_s3_bucket.this[0].arn",
                          "aws_s3_bucket.this[0]",
                          "aws_s3_bucket.this"
                        ]
                      },
                      "sid": {
                        "constant_value": "denyUnencryptedObjectUploads"
                      }
                    }
                  ]
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_bucket",
                    "var.attach_deny_unencrypted_object_uploads"
                  ]
                }
              },
              {
                "address": "data.aws_iam_policy_document.elb_log_delivery",
                "mode": "data",
                "type": "aws_iam_policy_document",
                "name": "elb_log_delivery",
                "provider_config_key": "aws",
                "expressions": {
                  "statement": [
                    {
                      "actions": { "constant_value": ["s3:PutObject"] },
                      "effect": { "constant_value": "Allow" },
                      "principals": [
                        {
                          "identifiers": {
                            "constant_value": [
                              "logdelivery.elasticloadbalancing.amazonaws.com"
                            ]
                          },
                          "type": { "constant_value": "Service" }
                        }
                      ],
                      "resources": {
                        "references": [
                          "aws_s3_bucket.this[0].arn",
                          "aws_s3_bucket.this[0]",
                          "aws_s3_bucket.this"
                        ]
                      },
                      "sid": { "constant_value": "" }
                    }
                  ]
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_bucket",
                    "var.attach_elb_log_delivery_policy"
                  ]
                }
              },
              {
                "address": "data.aws_iam_policy_document.inventory_and_analytics_destination_policy",
                "mode": "data",
                "type": "aws_iam_policy_document",
                "name": "inventory_and_analytics_destination_policy",
                "provider_config_key": "aws",
                "expressions": {
                  "statement": [
                    {
                      "actions": { "constant_value": ["s3:PutObject"] },
                      "condition": [
                        {
                          "test": { "constant_value": "ArnLike" },
                          "values": {
                            "references": [
                              "var.inventory_self_source_destination",
                              "aws_s3_bucket.this[0].arn",
                              "aws_s3_bucket.this[0]",
                              "aws_s3_bucket.this",
                              "var.inventory_source_bucket_arn",
                              "var.analytics_self_source_destination",
                              "aws_s3_bucket.this[0].arn",
                              "aws_s3_bucket.this[0]",
                              "aws_s3_bucket.this",
                              "var.analytics_source_bucket_arn"
                            ]
                          },
                          "variable": { "constant_value": "aws:SourceArn" }
                        },
                        {
                          "test": { "constant_value": "StringEquals" },
                          "values": {
                            "references": [
                              "var.inventory_self_source_destination",
                              "data.aws_caller_identity.current.id",
                              "data.aws_caller_identity.current",
                              "var.inventory_source_account_id",
                              "var.analytics_self_source_destination",
                              "data.aws_caller_identity.current.id",
                              "data.aws_caller_identity.current",
                              "var.analytics_source_account_id"
                            ]
                          },
                          "variable": { "constant_value": "aws:SourceAccount" }
                        },
                        {
                          "test": { "constant_value": "StringEquals" },
                          "values": {
                            "constant_value": ["bucket-owner-full-control"]
                          },
                          "variable": { "constant_value": "s3:x-amz-acl" }
                        }
                      ],
                      "effect": { "constant_value": "Allow" },
                      "principals": [
                        {
                          "identifiers": {
                            "constant_value": ["s3.amazonaws.com"]
                          },
                          "type": { "constant_value": "Service" }
                        }
                      ],
                      "resources": {
                        "references": [
                          "aws_s3_bucket.this[0].arn",
                          "aws_s3_bucket.this[0]",
                          "aws_s3_bucket.this"
                        ]
                      },
                      "sid": {
                        "constant_value": "destinationInventoryAndAnalyticsPolicy"
                      }
                    }
                  ]
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_bucket",
                    "var.attach_inventory_destination_policy",
                    "var.attach_analytics_destination_policy"
                  ]
                }
              },
              {
                "address": "data.aws_iam_policy_document.lb_log_delivery",
                "mode": "data",
                "type": "aws_iam_policy_document",
                "name": "lb_log_delivery",
                "provider_config_key": "aws",
                "expressions": {
                  "statement": [
                    {
                      "actions": { "constant_value": ["s3:PutObject"] },
                      "condition": [
                        {
                          "test": { "constant_value": "StringEquals" },
                          "values": {
                            "constant_value": ["bucket-owner-full-control"]
                          },
                          "variable": { "constant_value": "s3:x-amz-acl" }
                        }
                      ],
                      "effect": { "constant_value": "Allow" },
                      "principals": [
                        {
                          "identifiers": {
                            "constant_value": ["delivery.logs.amazonaws.com"]
                          },
                          "type": { "constant_value": "Service" }
                        }
                      ],
                      "resources": {
                        "references": [
                          "aws_s3_bucket.this[0].arn",
                          "aws_s3_bucket.this[0]",
                          "aws_s3_bucket.this"
                        ]
                      },
                      "sid": { "constant_value": "AWSLogDeliveryWrite" }
                    },
                    {
                      "actions": {
                        "constant_value": ["s3:GetBucketAcl", "s3:ListBucket"]
                      },
                      "effect": { "constant_value": "Allow" },
                      "principals": [
                        {
                          "identifiers": {
                            "constant_value": ["delivery.logs.amazonaws.com"]
                          },
                          "type": { "constant_value": "Service" }
                        }
                      ],
                      "resources": {
                        "references": [
                          "aws_s3_bucket.this[0].arn",
                          "aws_s3_bucket.this[0]",
                          "aws_s3_bucket.this"
                        ]
                      },
                      "sid": { "constant_value": "AWSLogDeliveryAclCheck" }
                    }
                  ]
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_bucket",
                    "var.attach_lb_log_delivery_policy"
                  ]
                }
              },
              {
                "address": "data.aws_iam_policy_document.require_latest_tls",
                "mode": "data",
                "type": "aws_iam_policy_document",
                "name": "require_latest_tls",
                "provider_config_key": "aws",
                "expressions": {
                  "statement": [
                    {
                      "actions": { "constant_value": ["s3:*"] },
                      "condition": [
                        {
                          "test": { "constant_value": "NumericLessThan" },
                          "values": { "constant_value": ["1.2"] },
                          "variable": { "constant_value": "s3:TlsVersion" }
                        }
                      ],
                      "effect": { "constant_value": "Deny" },
                      "principals": [
                        {
                          "identifiers": { "constant_value": ["*"] },
                          "type": { "constant_value": "*" }
                        }
                      ],
                      "resources": {
                        "references": [
                          "aws_s3_bucket.this[0].arn",
                          "aws_s3_bucket.this[0]",
                          "aws_s3_bucket.this",
                          "aws_s3_bucket.this[0].arn",
                          "aws_s3_bucket.this[0]",
                          "aws_s3_bucket.this"
                        ]
                      },
                      "sid": { "constant_value": "denyOutdatedTLS" }
                    }
                  ]
                },
                "schema_version": 0,
                "count_expression": {
                  "references": [
                    "local.create_bucket",
                    "var.attach_require_latest_tls_policy"
                  ]
                }
              },
              {
                "address": "data.aws_partition.current",
                "mode": "data",
                "type": "aws_partition",
                "name": "current",
                "provider_config_key": "aws",
                "schema_version": 0
              },
              {
                "address": "data.aws_region.current",
                "mode": "data",
                "type": "aws_region",
                "name": "current",
                "provider_config_key": "aws",
                "schema_version": 0
              }
            ],
            "variables": {
              "acceleration_status": {
                "default": null,
                "description": "(Optional) Sets the accelerate configuration of an existing bucket. Can be Enabled or Suspended."
              },
              "access_log_delivery_policy_source_accounts": {
                "default": [],
                "description": "(Optional) List of AWS Account IDs should be allowed to deliver access logs to this bucket."
              },
              "access_log_delivery_policy_source_buckets": {
                "default": [],
                "description": "(Optional) List of S3 bucket ARNs wich should be allowed to deliver access logs to this bucket."
              },
              "acl": {
                "default": null,
                "description": "(Optional) The canned ACL to apply. Conflicts with `grant`"
              },
              "allowed_kms_key_arn": {
                "default": null,
                "description": "The ARN of KMS key which should be allowed in PutObject"
              },
              "analytics_configuration": {
                "default": {},
                "description": "Map containing bucket analytics configuration."
              },
              "analytics_self_source_destination": {
                "default": false,
                "description": "Whether or not the analytics source bucket is also the destination bucket."
              },
              "analytics_source_account_id": {
                "default": null,
                "description": "The analytics source account id."
              },
              "analytics_source_bucket_arn": {
                "default": null,
                "description": "The analytics source bucket ARN."
              },
              "attach_access_log_delivery_policy": {
                "default": false,
                "description": "Controls if S3 bucket should have S3 access log delivery policy attached"
              },
              "attach_analytics_destination_policy": {
                "default": false,
                "description": "Controls if S3 bucket should have bucket analytics destination policy attached."
              },
              "attach_deny_incorrect_encryption_headers": {
                "default": false,
                "description": "Controls if S3 bucket should deny incorrect encryption headers policy attached."
              },
              "attach_deny_incorrect_kms_key_sse": {
                "default": false,
                "description": "Controls if S3 bucket policy should deny usage of incorrect KMS key SSE."
              },
              "attach_deny_insecure_transport_policy": {
                "default": false,
                "description": "Controls if S3 bucket should have deny non-SSL transport policy attached"
              },
              "attach_deny_unencrypted_object_uploads": {
                "default": false,
                "description": "Controls if S3 bucket should deny unencrypted object uploads policy attached."
              },
              "attach_elb_log_delivery_policy": {
                "default": false,
                "description": "Controls if S3 bucket should have ELB log delivery policy attached"
              },
              "attach_inventory_destination_policy": {
                "default": false,
                "description": "Controls if S3 bucket should have bucket inventory destination policy attached."
              },
              "attach_lb_log_delivery_policy": {
                "default": false,
                "description": "Controls if S3 bucket should have ALB/NLB log delivery policy attached"
              },
              "attach_policy": {
                "default": false,
                "description": "Controls if S3 bucket should have bucket policy attached (set to `true` to use value of `policy` as bucket policy)"
              },
              "attach_public_policy": {
                "default": true,
                "description": "Controls if a user defined public bucket policy will be attached (set to `false` to allow upstream to apply defaults to the bucket)"
              },
              "attach_require_latest_tls_policy": {
                "default": false,
                "description": "Controls if S3 bucket should require the latest version of TLS"
              },
              "block_public_acls": {
                "default": true,
                "description": "Whether Amazon S3 should block public ACLs for this bucket."
              },
              "block_public_policy": {
                "default": true,
                "description": "Whether Amazon S3 should block public bucket policies for this bucket."
              },
              "bucket": {
                "default": null,
                "description": "(Optional, Forces new resource) The name of the bucket. If omitted, Terraform will assign a random, unique name."
              },
              "bucket_prefix": {
                "default": null,
                "description": "(Optional, Forces new resource) Creates a unique bucket name beginning with the specified prefix. Conflicts with bucket."
              },
              "control_object_ownership": {
                "default": false,
                "description": "Whether to manage S3 Bucket Ownership Controls on this bucket."
              },
              "cors_rule": {
                "default": [],
                "description": "List of maps containing rules for Cross-Origin Resource Sharing."
              },
              "create_bucket": {
                "default": true,
                "description": "Controls if S3 bucket should be created"
              },
              "expected_bucket_owner": {
                "default": null,
                "description": "The account ID of the expected bucket owner"
              },
              "force_destroy": {
                "default": false,
                "description": "(Optional, Default:false ) A boolean that indicates all objects should be deleted from the bucket so that the bucket can be destroyed without error. These objects are not recoverable."
              },
              "grant": {
                "default": [],
                "description": "An ACL policy grant. Conflicts with `acl`"
              },
              "ignore_public_acls": {
                "default": true,
                "description": "Whether Amazon S3 should ignore public ACLs for this bucket."
              },
              "intelligent_tiering": {
                "default": {},
                "description": "Map containing intelligent tiering configuration."
              },
              "inventory_configuration": {
                "default": {},
                "description": "Map containing S3 inventory configuration."
              },
              "inventory_self_source_destination": {
                "default": false,
                "description": "Whether or not the inventory source bucket is also the destination bucket."
              },
              "inventory_source_account_id": {
                "default": null,
                "description": "The inventory source account id."
              },
              "inventory_source_bucket_arn": {
                "default": null,
                "description": "The inventory source bucket ARN."
              },
              "lifecycle_rule": {
                "default": [],
                "description": "List of maps containing configuration of object lifecycle management."
              },
              "logging": {
                "default": {},
                "description": "Map containing access bucket logging configuration."
              },
              "metric_configuration": {
                "default": [],
                "description": "Map containing bucket metric configuration."
              },
              "object_lock_configuration": {
                "default": {},
                "description": "Map containing S3 object locking configuration."
              },
              "object_lock_enabled": {
                "default": false,
                "description": "Whether S3 bucket should have an Object Lock configuration enabled."
              },
              "object_ownership": {
                "default": "BucketOwnerEnforced",
                "description": "Object ownership. Valid values: BucketOwnerEnforced, BucketOwnerPreferred or ObjectWriter. 'BucketOwnerEnforced': ACLs are disabled, and the bucket owner automatically owns and has full control over every object in the bucket. 'BucketOwnerPreferred': Objects uploaded to the bucket change ownership to the bucket owner if the objects are uploaded with the bucket-owner-full-control canned ACL. 'ObjectWriter': The uploading account will own the object if the object is uploaded with the bucket-owner-full-control canned ACL."
              },
              "owner": {
                "default": {},
                "description": "Bucket owner's display name and ID. Conflicts with `acl`"
              },
              "policy": {
                "default": null,
                "description": "(Optional) A valid bucket policy JSON document. Note that if the policy document is not specific enough (but still valid), Terraform may view the policy as constantly changing in a terraform plan. In this case, please make sure you use the verbose/specific version of the policy. For more information about building AWS IAM policy documents with Terraform, see the AWS IAM Policy Document Guide."
              },
              "putin_khuylo": {
                "default": true,
                "description": "Do you agree that Putin doesn't respect Ukrainian sovereignty and territorial integrity? More info: https://en.wikipedia.org/wiki/Putin_khuylo!"
              },
              "replication_configuration": {
                "default": {},
                "description": "Map containing cross-region replication configuration."
              },
              "request_payer": {
                "default": null,
                "description": "(Optional) Specifies who should bear the cost of Amazon S3 data transfer. Can be either BucketOwner or Requester. By default, the owner of the S3 bucket would incur the costs of any data transfer. See Requester Pays Buckets developer guide for more information."
              },
              "restrict_public_buckets": {
                "default": true,
                "description": "Whether Amazon S3 should restrict public bucket policies for this bucket."
              },
              "server_side_encryption_configuration": {
                "default": {},
                "description": "Map containing server-side encryption configuration."
              },
              "tags": {
                "default": {},
                "description": "(Optional) A mapping of tags to assign to the bucket."
              },
              "versioning": {
                "default": {},
                "description": "Map containing versioning configuration."
              },
              "website": {
                "default": {},
                "description": "Map containing static web-site hosting or redirect configuration."
              }
            }
          },
          "version_constraint": "~\u003e 3.0"
        }
      }
    }
  },
  "relevant_attributes": [
    {
      "resource": "module.lambda_function.aws_s3_object.lambda_package[0]",
      "attribute": ["version_id"]
    },
    {
      "resource": "module.lambda_function.data.external.archive_prepare[0]",
      "attribute": ["result", "was_missing"]
    },
    {
      "resource": "module.lambda_function.data.aws_arn.log_group_arn[0]",
      "attribute": ["resource"]
    },
    { "resource": "aws_sns_topic.example_topic", "attribute": ["arn"] },
    {
      "resource": "module.lambda_function.data.external.archive_prepare[0]",
      "attribute": ["result", "timestamp"]
    },
    {
      "resource": "module.s3_bucket.aws_s3_bucket.this[0]",
      "attribute": ["arn"]
    },
    {
      "resource": "module.lambda_function.aws_lambda_function.this[0]",
      "attribute": ["qualified_arn"]
    },
    {
      "resource": "module.lambda_function.aws_cloudwatch_log_group.lambda[0]",
      "attribute": ["name"]
    },
    {
      "resource": "module.lambda_function.data.external.archive_prepare[0]",
      "attribute": ["result", "build_plan"]
    },
    {
      "resource": "module.s3_bucket.aws_s3_bucket.this[0]",
      "attribute": ["hosted_zone_id"]
    },
    {
      "resource": "module.lambda_function.data.aws_caller_identity.current",
      "attribute": ["account_id"]
    },
    {
      "resource": "module.lambda_function.aws_lambda_layer_version.this[0]",
      "attribute": ["created_date"]
    },
    {
      "resource": "module.s3_bucket.data.aws_iam_policy_document.combined[0]",
      "attribute": ["json"]
    },
    {
      "resource": "module.lambda_function.data.aws_iam_policy_document.logs[0]",
      "attribute": ["json"]
    },
    {
      "resource": "module.lambda_function.data.external.archive_prepare[0]",
      "attribute": ["result", "filename"]
    },
    {
      "resource": "module.s3_bucket.aws_s3_bucket.this[0]",
      "attribute": ["region"]
    },
    {
      "resource": "module.lambda_function.aws_lambda_function.this[0]",
      "attribute": ["signing_job_arn"]
    },
    {
      "resource": "module.lambda_function.aws_lambda_function.this[0]",
      "attribute": ["qualified_invoke_arn"]
    },
    {
      "resource": "module.s3_bucket.aws_s3_bucket_website_configuration.this[0]",
      "attribute": ["website_domain"]
    },
    {
      "resource": "module.lambda_function.aws_lambda_layer_version.this[0]",
      "attribute": ["arn"]
    },
    {
      "resource": "module.lambda_function.data.aws_cloudwatch_log_group.lambda[0]",
      "attribute": ["name"]
    },
    { "resource": "aws_iam_policy.lambda_s3_policy", "attribute": ["arn"] },
    {
      "resource": "module.s3_bucket.aws_s3_bucket_website_configuration.this[0]",
      "attribute": ["website_endpoint"]
    },
    {
      "resource": "module.s3_bucket.aws_s3_bucket_policy.this[0]",
      "attribute": ["policy"]
    },
    {
      "resource": "module.lambda_function.aws_lambda_function.this[0]",
      "attribute": ["source_code_size"]
    },
    {
      "resource": "module.lambda_function.aws_lambda_function.this[0]",
      "attribute": ["source_code_hash"]
    },
    {
      "resource": "module.lambda_function.data.aws_iam_policy_document.assume_role[0]",
      "attribute": ["json"]
    },
    {
      "resource": "module.lambda_function.data.aws_region.current",
      "attribute": ["name"]
    },
    {
      "resource": "module.lambda_function.aws_lambda_function_url.this[0]",
      "attribute": ["url_id"]
    },
    {
      "resource": "module.lambda_function.aws_lambda_function_url.this[0]",
      "attribute": ["function_url"]
    },
    {
      "resource": "module.lambda_function.aws_iam_role.lambda[0]",
      "attribute": ["name"]
    },
    {
      "resource": "module.lambda_function.aws_lambda_layer_version.this[0]",
      "attribute": ["source_code_size"]
    },
    {
      "resource": "module.lambda_function.data.aws_cloudwatch_log_group.lambda[0]",
      "attribute": ["arn"]
    },
    {
      "resource": "module.s3_bucket.data.aws_canonical_user_id.this[0]",
      "attribute": ["id"]
    },
    {
      "resource": "module.lambda_function.data.external.archive_prepare[0]",
      "attribute": ["result", "build_plan_filename"]
    },
    {
      "resource": "module.lambda_function.aws_iam_role.lambda[0]",
      "attribute": ["unique_id"]
    },
    {
      "resource": "module.lambda_function.aws_lambda_function.this[0]",
      "attribute": ["signing_profile_version_arn"]
    },
    {
      "resource": "module.lambda_function.aws_cloudwatch_log_group.lambda[0]",
      "attribute": ["arn"]
    },
    {
      "resource": "module.lambda_function.aws_lambda_function.this[0]",
      "attribute": ["arn"]
    },
    {
      "resource": "module.lambda_function.data.aws_arn.log_group_arn[0]",
      "attribute": ["service"]
    },
    { "resource": "aws_sqs_queue.example_queue", "attribute": ["arn"] },
    { "resource": "aws_sqs_queue.example_queue", "attribute": ["id"] },
    {
      "resource": "module.s3_bucket.aws_s3_bucket_lifecycle_configuration.this[0]",
      "attribute": ["rule"]
    },
    {
      "resource": "module.lambda_function.aws_lambda_layer_version.this[0]",
      "attribute": ["version"]
    },
    {
      "resource": "module.lambda_function.data.aws_arn.log_group_arn[0]",
      "attribute": ["partition"]
    },
    {
      "resource": "module.lambda_function.aws_lambda_function.this[0]",
      "attribute": ["version"]
    },
    {
      "resource": "module.lambda_function.aws_lambda_function.this[0]",
      "attribute": ["invoke_arn"]
    },
    {
      "resource": "module.lambda_function.aws_lambda_event_source_mapping.this",
      "attribute": []
    },
    {
      "resource": "module.lambda_function.aws_lambda_layer_version.this[0]",
      "attribute": ["layer_arn"]
    },
    {
      "resource": "module.lambda_function.aws_lambda_function.this[0]",
      "attribute": ["function_name"]
    },
    {
      "resource": "module.s3_bucket.aws_s3_bucket.this[0]",
      "attribute": ["id"]
    },
    {
      "resource": "module.lambda_function.aws_iam_policy.logs[0]",
      "attribute": ["arn"]
    },
    {
      "resource": "module.lambda_function.aws_iam_role.lambda[0]",
      "attribute": ["arn"]
    },
    {
      "resource": "module.s3_bucket.aws_s3_bucket_policy.this[0]",
      "attribute": ["id"]
    },
    {
      "resource": "module.lambda_function.aws_lambda_function.this[0]",
      "attribute": ["last_modified"]
    },
    {
      "resource": "module.s3_bucket.aws_s3_bucket.this[0]",
      "attribute": ["bucket_domain_name"]
    },
    {
      "resource": "module.s3_bucket.aws_s3_bucket.this[0]",
      "attribute": ["bucket_regional_domain_name"]
    },
    {
      "resource": "module.lambda_function.data.aws_arn.log_group_arn[0]",
      "attribute": ["account"]
    }
  ],
  "timestamp": "2024-12-25T04:00:34Z",
  "applyable": true,
  "complete": true,
  "errored": false
}
